/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.AppDefinitionPublishRepresentation;
import org.activiti.engine.remote.client.model.AppDefinitionRepresentation;
import org.activiti.engine.remote.client.model.AppDefinitionSaveRepresentation;
import org.activiti.engine.remote.client.model.AppDefinitionUpdateResultRepresentation;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppDefinitionsApi {
    private ApiClient apiClient;

    public AppDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppDefinitionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAppDefinitionUsingDELETE
     * @param appDefinitionId appDefinitionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppDefinitionUsingDELETECall(Long appDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{appDefinitionId}"
            .replaceAll("\\{" + "appDefinitionId" + "\\}", apiClient.escapeString(appDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppDefinitionUsingDELETEValidateBeforeCall(Long appDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appDefinitionId' is set
        if (appDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'appDefinitionId' when calling deleteAppDefinitionUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppDefinitionUsingDELETECall(appDefinitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteAppDefinition
     * 
     * @param appDefinitionId appDefinitionId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAppDefinitionUsingDELETE(Long appDefinitionId) throws ApiException {
        deleteAppDefinitionUsingDELETEWithHttpInfo(appDefinitionId);
    }

    /**
     * deleteAppDefinition
     * 
     * @param appDefinitionId appDefinitionId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAppDefinitionUsingDELETEWithHttpInfo(Long appDefinitionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppDefinitionUsingDELETEValidateBeforeCall(appDefinitionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteAppDefinition (asynchronously)
     * 
     * @param appDefinitionId appDefinitionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppDefinitionUsingDELETEAsync(Long appDefinitionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppDefinitionUsingDELETEValidateBeforeCall(appDefinitionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for exportAppDefinitionUsingGET
     * @param modelId modelId from a runtime app or the id of an app definition model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportAppDefinitionUsingGETCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}/export"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/zip"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportAppDefinitionUsingGETValidateBeforeCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling exportAppDefinitionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = exportAppDefinitionUsingGETCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export an app definition
     * This will return a zip file containing the app definition model and all related models (process definitions and forms).
     * @param modelId modelId from a runtime app or the id of an app definition model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void exportAppDefinitionUsingGET(Long modelId) throws ApiException {
        exportAppDefinitionUsingGETWithHttpInfo(modelId);
    }

    /**
     * Export an app definition
     * This will return a zip file containing the app definition model and all related models (process definitions and forms).
     * @param modelId modelId from a runtime app or the id of an app definition model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> exportAppDefinitionUsingGETWithHttpInfo(Long modelId) throws ApiException {
        com.squareup.okhttp.Call call = exportAppDefinitionUsingGETValidateBeforeCall(modelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Export an app definition (asynchronously)
     * This will return a zip file containing the app definition model and all related models (process definitions and forms).
     * @param modelId modelId from a runtime app or the id of an app definition model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportAppDefinitionUsingGETAsync(Long modelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportAppDefinitionUsingGETValidateBeforeCall(modelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAppDefinitionUsingGET
     * @param modelId Application definition ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppDefinitionUsingGETCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppDefinitionUsingGETValidateBeforeCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getAppDefinitionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppDefinitionUsingGETCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an app definition
     * 
     * @param modelId Application definition ID (required)
     * @return AppDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionRepresentation getAppDefinitionUsingGET(Long modelId) throws ApiException {
        ApiResponse<AppDefinitionRepresentation> resp = getAppDefinitionUsingGETWithHttpInfo(modelId);
        return resp.getData();
    }

    /**
     * Get an app definition
     * 
     * @param modelId Application definition ID (required)
     * @return ApiResponse&lt;AppDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionRepresentation> getAppDefinitionUsingGETWithHttpInfo(Long modelId) throws ApiException {
        com.squareup.okhttp.Call call = getAppDefinitionUsingGETValidateBeforeCall(modelId, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an app definition (asynchronously)
     * 
     * @param modelId Application definition ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppDefinitionUsingGETAsync(Long modelId, final ApiCallback<AppDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppDefinitionUsingGETValidateBeforeCall(modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importAndPublishAppUsingPOST
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importAndPublishAppUsingPOSTCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/publish-app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importAndPublishAppUsingPOSTValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAndPublishAppUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = importAndPublishAppUsingPOSTCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * importAndPublishApp
     * 
     * @param file file (required)
     * @return AppDefinitionUpdateResultRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionUpdateResultRepresentation importAndPublishAppUsingPOST(File file) throws ApiException {
        ApiResponse<AppDefinitionUpdateResultRepresentation> resp = importAndPublishAppUsingPOSTWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * importAndPublishApp
     * 
     * @param file file (required)
     * @return ApiResponse&lt;AppDefinitionUpdateResultRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionUpdateResultRepresentation> importAndPublishAppUsingPOSTWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = importAndPublishAppUsingPOSTValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * importAndPublishApp (asynchronously)
     * 
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importAndPublishAppUsingPOSTAsync(File file, final ApiCallback<AppDefinitionUpdateResultRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importAndPublishAppUsingPOSTValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importAndPublishAppUsingPOST1
     * @param modelId modelId (required)
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importAndPublishAppUsingPOST1Call(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}/publish-app"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importAndPublishAppUsingPOST1ValidateBeforeCall(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling importAndPublishAppUsingPOST1(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAndPublishAppUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = importAndPublishAppUsingPOST1Call(modelId, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * importAndPublishApp
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @return AppDefinitionUpdateResultRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionUpdateResultRepresentation importAndPublishAppUsingPOST1(Long modelId, File file) throws ApiException {
        ApiResponse<AppDefinitionUpdateResultRepresentation> resp = importAndPublishAppUsingPOST1WithHttpInfo(modelId, file);
        return resp.getData();
    }

    /**
     * importAndPublishApp
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @return ApiResponse&lt;AppDefinitionUpdateResultRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionUpdateResultRepresentation> importAndPublishAppUsingPOST1WithHttpInfo(Long modelId, File file) throws ApiException {
        com.squareup.okhttp.Call call = importAndPublishAppUsingPOST1ValidateBeforeCall(modelId, file, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * importAndPublishApp (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importAndPublishAppUsingPOST1Async(Long modelId, File file, final ApiCallback<AppDefinitionUpdateResultRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importAndPublishAppUsingPOST1ValidateBeforeCall(modelId, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importAppDefinitionUsingPOST
     * @param file file (required)
     * @param renewIdmEntries Whether to renew user and group identifiers (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importAppDefinitionUsingPOSTCall(File file, String renewIdmEntries, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (renewIdmEntries != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renewIdmEntries", renewIdmEntries));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importAppDefinitionUsingPOSTValidateBeforeCall(File file, String renewIdmEntries, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAppDefinitionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = importAppDefinitionUsingPOSTCall(file, renewIdmEntries, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import a new app definition
     * Allows a zip file to be uploaded containing an app definition and any number of included models.&lt;p&gt;This is useful to bootstrap an environment (for users or continuous integration).&lt;p&gt;Before using any processes included in the import the app must be published and deployed.
     * @param file file (required)
     * @param renewIdmEntries Whether to renew user and group identifiers (optional, default to false)
     * @return AppDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionRepresentation importAppDefinitionUsingPOST(File file, String renewIdmEntries) throws ApiException {
        ApiResponse<AppDefinitionRepresentation> resp = importAppDefinitionUsingPOSTWithHttpInfo(file, renewIdmEntries);
        return resp.getData();
    }

    /**
     * Import a new app definition
     * Allows a zip file to be uploaded containing an app definition and any number of included models.&lt;p&gt;This is useful to bootstrap an environment (for users or continuous integration).&lt;p&gt;Before using any processes included in the import the app must be published and deployed.
     * @param file file (required)
     * @param renewIdmEntries Whether to renew user and group identifiers (optional, default to false)
     * @return ApiResponse&lt;AppDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionRepresentation> importAppDefinitionUsingPOSTWithHttpInfo(File file, String renewIdmEntries) throws ApiException {
        com.squareup.okhttp.Call call = importAppDefinitionUsingPOSTValidateBeforeCall(file, renewIdmEntries, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import a new app definition (asynchronously)
     * Allows a zip file to be uploaded containing an app definition and any number of included models.&lt;p&gt;This is useful to bootstrap an environment (for users or continuous integration).&lt;p&gt;Before using any processes included in the import the app must be published and deployed.
     * @param file file (required)
     * @param renewIdmEntries Whether to renew user and group identifiers (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importAppDefinitionUsingPOSTAsync(File file, String renewIdmEntries, final ApiCallback<AppDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importAppDefinitionUsingPOSTValidateBeforeCall(file, renewIdmEntries, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importAppDefinitionUsingPOST1
     * @param modelId modelId (required)
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importAppDefinitionUsingPOST1Call(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}/import"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importAppDefinitionUsingPOST1ValidateBeforeCall(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling importAppDefinitionUsingPOST1(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAppDefinitionUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = importAppDefinitionUsingPOST1Call(modelId, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the content of an existing app
     * Imports an app inside an existing app definition and creates a new version&lt;p&gt;Before using any new or updated processes included in the import the app must be (re-)published and deployed.
     * @param modelId modelId (required)
     * @param file file (required)
     * @return AppDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionRepresentation importAppDefinitionUsingPOST1(Long modelId, File file) throws ApiException {
        ApiResponse<AppDefinitionRepresentation> resp = importAppDefinitionUsingPOST1WithHttpInfo(modelId, file);
        return resp.getData();
    }

    /**
     * Update the content of an existing app
     * Imports an app inside an existing app definition and creates a new version&lt;p&gt;Before using any new or updated processes included in the import the app must be (re-)published and deployed.
     * @param modelId modelId (required)
     * @param file file (required)
     * @return ApiResponse&lt;AppDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionRepresentation> importAppDefinitionUsingPOST1WithHttpInfo(Long modelId, File file) throws ApiException {
        com.squareup.okhttp.Call call = importAppDefinitionUsingPOST1ValidateBeforeCall(modelId, file, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the content of an existing app (asynchronously)
     * Imports an app inside an existing app definition and creates a new version&lt;p&gt;Before using any new or updated processes included in the import the app must be (re-)published and deployed.
     * @param modelId modelId (required)
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importAppDefinitionUsingPOST1Async(Long modelId, File file, final ApiCallback<AppDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importAppDefinitionUsingPOST1ValidateBeforeCall(modelId, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishAppDefinitionUsingPOST
     * @param modelId modelId (required)
     * @param publishModel publishModel (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishAppDefinitionUsingPOSTCall(Long modelId, AppDefinitionPublishRepresentation publishModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = publishModel;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}/publish"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishAppDefinitionUsingPOSTValidateBeforeCall(Long modelId, AppDefinitionPublishRepresentation publishModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling publishAppDefinitionUsingPOST(Async)");
        }
        
        // verify the required parameter 'publishModel' is set
        if (publishModel == null) {
            throw new ApiException("Missing the required parameter 'publishModel' when calling publishAppDefinitionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = publishAppDefinitionUsingPOSTCall(modelId, publishModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish an app definition
     * Publishing an app definition makes it available for use. The application must not have any validation errors or an error will be returned.&lt;p&gt;Before an app definition can be used by other users, it must also be deployed for their use
     * @param modelId modelId (required)
     * @param publishModel publishModel (required)
     * @return AppDefinitionUpdateResultRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionUpdateResultRepresentation publishAppDefinitionUsingPOST(Long modelId, AppDefinitionPublishRepresentation publishModel) throws ApiException {
        ApiResponse<AppDefinitionUpdateResultRepresentation> resp = publishAppDefinitionUsingPOSTWithHttpInfo(modelId, publishModel);
        return resp.getData();
    }

    /**
     * Publish an app definition
     * Publishing an app definition makes it available for use. The application must not have any validation errors or an error will be returned.&lt;p&gt;Before an app definition can be used by other users, it must also be deployed for their use
     * @param modelId modelId (required)
     * @param publishModel publishModel (required)
     * @return ApiResponse&lt;AppDefinitionUpdateResultRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionUpdateResultRepresentation> publishAppDefinitionUsingPOSTWithHttpInfo(Long modelId, AppDefinitionPublishRepresentation publishModel) throws ApiException {
        com.squareup.okhttp.Call call = publishAppDefinitionUsingPOSTValidateBeforeCall(modelId, publishModel, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish an app definition (asynchronously)
     * Publishing an app definition makes it available for use. The application must not have any validation errors or an error will be returned.&lt;p&gt;Before an app definition can be used by other users, it must also be deployed for their use
     * @param modelId modelId (required)
     * @param publishModel publishModel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishAppDefinitionUsingPOSTAsync(Long modelId, AppDefinitionPublishRepresentation publishModel, final ApiCallback<AppDefinitionUpdateResultRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishAppDefinitionUsingPOSTValidateBeforeCall(modelId, publishModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppDefinitionUsingPUT
     * @param modelId Application definition ID (required)
     * @param updatedModel updatedModel (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppDefinitionUsingPUTCall(Long modelId, AppDefinitionSaveRepresentation updatedModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updatedModel;

        // create path and map variables
        String localVarPath = "/enterprise/app-definitions/{modelId}"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppDefinitionUsingPUTValidateBeforeCall(Long modelId, AppDefinitionSaveRepresentation updatedModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateAppDefinitionUsingPUT(Async)");
        }
        
        // verify the required parameter 'updatedModel' is set
        if (updatedModel == null) {
            throw new ApiException("Missing the required parameter 'updatedModel' when calling updateAppDefinitionUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppDefinitionUsingPUTCall(modelId, updatedModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an app definition
     * 
     * @param modelId Application definition ID (required)
     * @param updatedModel updatedModel (required)
     * @return AppDefinitionUpdateResultRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppDefinitionUpdateResultRepresentation updateAppDefinitionUsingPUT(Long modelId, AppDefinitionSaveRepresentation updatedModel) throws ApiException {
        ApiResponse<AppDefinitionUpdateResultRepresentation> resp = updateAppDefinitionUsingPUTWithHttpInfo(modelId, updatedModel);
        return resp.getData();
    }

    /**
     * Update an app definition
     * 
     * @param modelId Application definition ID (required)
     * @param updatedModel updatedModel (required)
     * @return ApiResponse&lt;AppDefinitionUpdateResultRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppDefinitionUpdateResultRepresentation> updateAppDefinitionUsingPUTWithHttpInfo(Long modelId, AppDefinitionSaveRepresentation updatedModel) throws ApiException {
        com.squareup.okhttp.Call call = updateAppDefinitionUsingPUTValidateBeforeCall(modelId, updatedModel, null, null);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an app definition (asynchronously)
     * 
     * @param modelId Application definition ID (required)
     * @param updatedModel updatedModel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppDefinitionUsingPUTAsync(Long modelId, AppDefinitionSaveRepresentation updatedModel, final ApiCallback<AppDefinitionUpdateResultRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppDefinitionUsingPUTValidateBeforeCall(modelId, updatedModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppDefinitionUpdateResultRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
