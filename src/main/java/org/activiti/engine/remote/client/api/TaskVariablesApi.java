/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.RestVariable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskVariablesApi {
    private ApiClient apiClient;

    public TaskVariablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskVariablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTaskVariableUsingPOST
     * @param taskId taskId (required)
     * @param restVariables restVariables (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskVariableUsingPOSTCall(String taskId, List<RestVariable> restVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = restVariables;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskVariableUsingPOSTValidateBeforeCall(String taskId, List<RestVariable> restVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskVariableUsingPOST(Async)");
        }
        
        // verify the required parameter 'restVariables' is set
        if (restVariables == null) {
            throw new ApiException("Missing the required parameter 'restVariables' when calling createTaskVariableUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTaskVariableUsingPOSTCall(taskId, restVariables, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create variables
     * 
     * @param taskId taskId (required)
     * @param restVariables restVariables (required)
     * @return List&lt;RestVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RestVariable> createTaskVariableUsingPOST(String taskId, List<RestVariable> restVariables) throws ApiException {
        ApiResponse<List<RestVariable>> resp = createTaskVariableUsingPOSTWithHttpInfo(taskId, restVariables);
        return resp.getData();
    }

    /**
     * Create variables
     * 
     * @param taskId taskId (required)
     * @param restVariables restVariables (required)
     * @return ApiResponse&lt;List&lt;RestVariable&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RestVariable>> createTaskVariableUsingPOSTWithHttpInfo(String taskId, List<RestVariable> restVariables) throws ApiException {
        com.squareup.okhttp.Call call = createTaskVariableUsingPOSTValidateBeforeCall(taskId, restVariables, null, null);
        Type localVarReturnType = new TypeToken<List<RestVariable>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create variables (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param restVariables restVariables (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskVariableUsingPOSTAsync(String taskId, List<RestVariable> restVariables, final ApiCallback<List<RestVariable>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskVariableUsingPOSTValidateBeforeCall(taskId, restVariables, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RestVariable>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllLocalTaskVariablesUsingDELETE
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllLocalTaskVariablesUsingDELETECall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllLocalTaskVariablesUsingDELETEValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteAllLocalTaskVariablesUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllLocalTaskVariablesUsingDELETECall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update variables
     * 
     * @param taskId taskId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllLocalTaskVariablesUsingDELETE(String taskId) throws ApiException {
        deleteAllLocalTaskVariablesUsingDELETEWithHttpInfo(taskId);
    }

    /**
     * Create or update variables
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllLocalTaskVariablesUsingDELETEWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllLocalTaskVariablesUsingDELETEValidateBeforeCall(taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or update variables (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllLocalTaskVariablesUsingDELETEAsync(String taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllLocalTaskVariablesUsingDELETEValidateBeforeCall(taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteVariableUsingDELETE
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVariableUsingDELETECall(String taskId, String variableName, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables/{variableName}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "variableName" + "\\}", apiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVariableUsingDELETEValidateBeforeCall(String taskId, String variableName, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteVariableUsingDELETE(Async)");
        }
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling deleteVariableUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVariableUsingDELETECall(taskId, variableName, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVariableUsingDELETE(String taskId, String variableName, String scope) throws ApiException {
        deleteVariableUsingDELETEWithHttpInfo(taskId, variableName, scope);
    }

    /**
     * Delete a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVariableUsingDELETEWithHttpInfo(String taskId, String variableName, String scope) throws ApiException {
        com.squareup.okhttp.Call call = deleteVariableUsingDELETEValidateBeforeCall(taskId, variableName, scope, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a variable (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVariableUsingDELETEAsync(String taskId, String variableName, String scope, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVariableUsingDELETEValidateBeforeCall(taskId, variableName, scope, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getVariableUsingGET
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVariableUsingGETCall(String taskId, String variableName, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables/{variableName}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "variableName" + "\\}", apiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVariableUsingGETValidateBeforeCall(String taskId, String variableName, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getVariableUsingGET(Async)");
        }
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling getVariableUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getVariableUsingGETCall(taskId, variableName, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @return RestVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestVariable getVariableUsingGET(String taskId, String variableName, String scope) throws ApiException {
        ApiResponse<RestVariable> resp = getVariableUsingGETWithHttpInfo(taskId, variableName, scope);
        return resp.getData();
    }

    /**
     * Get a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @return ApiResponse&lt;RestVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestVariable> getVariableUsingGETWithHttpInfo(String taskId, String variableName, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getVariableUsingGETValidateBeforeCall(taskId, variableName, scope, null, null);
        Type localVarReturnType = new TypeToken<RestVariable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a variable (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param scope scope (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVariableUsingGETAsync(String taskId, String variableName, String scope, final ApiCallback<RestVariable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVariableUsingGETValidateBeforeCall(taskId, variableName, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestVariable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVariablesUsingGET
     * @param taskId taskId (required)
     * @param scope scope (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVariablesUsingGETCall(String taskId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVariablesUsingGETValidateBeforeCall(String taskId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getVariablesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getVariablesUsingGETCall(taskId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List variables
     * 
     * @param taskId taskId (required)
     * @param scope scope (optional)
     * @return List&lt;RestVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RestVariable> getVariablesUsingGET(String taskId, String scope) throws ApiException {
        ApiResponse<List<RestVariable>> resp = getVariablesUsingGETWithHttpInfo(taskId, scope);
        return resp.getData();
    }

    /**
     * List variables
     * 
     * @param taskId taskId (required)
     * @param scope scope (optional)
     * @return ApiResponse&lt;List&lt;RestVariable&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RestVariable>> getVariablesUsingGETWithHttpInfo(String taskId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getVariablesUsingGETValidateBeforeCall(taskId, scope, null, null);
        Type localVarReturnType = new TypeToken<List<RestVariable>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List variables (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param scope scope (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVariablesUsingGETAsync(String taskId, String scope, final ApiCallback<List<RestVariable>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVariablesUsingGETValidateBeforeCall(taskId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RestVariable>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVariableUsingPUT
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param restVariable restVariable (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVariableUsingPUTCall(String taskId, String variableName, RestVariable restVariable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = restVariable;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/variables/{variableName}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "variableName" + "\\}", apiClient.escapeString(variableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVariableUsingPUTValidateBeforeCall(String taskId, String variableName, RestVariable restVariable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateVariableUsingPUT(Async)");
        }
        
        // verify the required parameter 'variableName' is set
        if (variableName == null) {
            throw new ApiException("Missing the required parameter 'variableName' when calling updateVariableUsingPUT(Async)");
        }
        
        // verify the required parameter 'restVariable' is set
        if (restVariable == null) {
            throw new ApiException("Missing the required parameter 'restVariable' when calling updateVariableUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVariableUsingPUTCall(taskId, variableName, restVariable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param restVariable restVariable (required)
     * @return RestVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestVariable updateVariableUsingPUT(String taskId, String variableName, RestVariable restVariable) throws ApiException {
        ApiResponse<RestVariable> resp = updateVariableUsingPUTWithHttpInfo(taskId, variableName, restVariable);
        return resp.getData();
    }

    /**
     * Update a variable
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param restVariable restVariable (required)
     * @return ApiResponse&lt;RestVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestVariable> updateVariableUsingPUTWithHttpInfo(String taskId, String variableName, RestVariable restVariable) throws ApiException {
        com.squareup.okhttp.Call call = updateVariableUsingPUTValidateBeforeCall(taskId, variableName, restVariable, null, null);
        Type localVarReturnType = new TypeToken<RestVariable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a variable (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param variableName variableName (required)
     * @param restVariable restVariable (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVariableUsingPUTAsync(String taskId, String variableName, RestVariable restVariable, final ApiCallback<RestVariable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVariableUsingPUTValidateBeforeCall(taskId, variableName, restVariable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestVariable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
