/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.CompleteFormRepresentation;
import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.FormValueRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceVariableRepresentation;
import org.activiti.engine.remote.client.model.SaveFormRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskFormsApi {
    private ApiClient apiClient;

    public TaskFormsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskFormsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for completeTaskFormUsingPOST
     * @param taskId taskId (required)
     * @param completeTaskFormRepresentation completeTaskFormRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call completeTaskFormUsingPOSTCall(String taskId, CompleteFormRepresentation completeTaskFormRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = completeTaskFormRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeTaskFormUsingPOSTValidateBeforeCall(String taskId, CompleteFormRepresentation completeTaskFormRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling completeTaskFormUsingPOST(Async)");
        }
        
        // verify the required parameter 'completeTaskFormRepresentation' is set
        if (completeTaskFormRepresentation == null) {
            throw new ApiException("Missing the required parameter 'completeTaskFormRepresentation' when calling completeTaskFormUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = completeTaskFormUsingPOSTCall(taskId, completeTaskFormRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Complete a task form
     * 
     * @param taskId taskId (required)
     * @param completeTaskFormRepresentation completeTaskFormRepresentation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void completeTaskFormUsingPOST(String taskId, CompleteFormRepresentation completeTaskFormRepresentation) throws ApiException {
        completeTaskFormUsingPOSTWithHttpInfo(taskId, completeTaskFormRepresentation);
    }

    /**
     * Complete a task form
     * 
     * @param taskId taskId (required)
     * @param completeTaskFormRepresentation completeTaskFormRepresentation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> completeTaskFormUsingPOSTWithHttpInfo(String taskId, CompleteFormRepresentation completeTaskFormRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = completeTaskFormUsingPOSTValidateBeforeCall(taskId, completeTaskFormRepresentation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Complete a task form (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param completeTaskFormRepresentation completeTaskFormRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeTaskFormUsingPOSTAsync(String taskId, CompleteFormRepresentation completeTaskFormRepresentation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeTaskFormUsingPOSTValidateBeforeCall(taskId, completeTaskFormRepresentation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getProcessInstanceVariablesUsingGET1
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceVariablesUsingGET1Call(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}/variables"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstanceVariablesUsingGET1ValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getProcessInstanceVariablesUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstanceVariablesUsingGET1Call(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get task variables
     * 
     * @param taskId taskId (required)
     * @return List&lt;ProcessInstanceVariableRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProcessInstanceVariableRepresentation> getProcessInstanceVariablesUsingGET1(String taskId) throws ApiException {
        ApiResponse<List<ProcessInstanceVariableRepresentation>> resp = getProcessInstanceVariablesUsingGET1WithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get task variables
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;List&lt;ProcessInstanceVariableRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProcessInstanceVariableRepresentation>> getProcessInstanceVariablesUsingGET1WithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstanceVariablesUsingGET1ValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<List<ProcessInstanceVariableRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get task variables (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceVariablesUsingGET1Async(String taskId, final ApiCallback<List<ProcessInstanceVariableRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstanceVariablesUsingGET1ValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProcessInstanceVariableRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestFieldValuesUsingGET1
     * @param taskId taskId (required)
     * @param field field (required)
     * @param column column (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGET1Call(String taskId, String field, String column, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}/form-values/{field}/{column}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()))
            .replaceAll("\\{" + "column" + "\\}", apiClient.escapeString(column.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestFieldValuesUsingGET1ValidateBeforeCall(String taskId, String field, String column, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getRestFieldValuesUsingGET1(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getRestFieldValuesUsingGET1(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling getRestFieldValuesUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET1Call(taskId, field, column, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve column field values
     * Specific case to retrieve information on a specific column
     * @param taskId taskId (required)
     * @param field field (required)
     * @param column column (required)
     * @return List&lt;FormValueRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormValueRepresentation> getRestFieldValuesUsingGET1(String taskId, String field, String column) throws ApiException {
        ApiResponse<List<FormValueRepresentation>> resp = getRestFieldValuesUsingGET1WithHttpInfo(taskId, field, column);
        return resp.getData();
    }

    /**
     * Retrieve column field values
     * Specific case to retrieve information on a specific column
     * @param taskId taskId (required)
     * @param field field (required)
     * @param column column (required)
     * @return ApiResponse&lt;List&lt;FormValueRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormValueRepresentation>> getRestFieldValuesUsingGET1WithHttpInfo(String taskId, String field, String column) throws ApiException {
        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET1ValidateBeforeCall(taskId, field, column, null, null);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve column field values (asynchronously)
     * Specific case to retrieve information on a specific column
     * @param taskId taskId (required)
     * @param field field (required)
     * @param column column (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGET1Async(String taskId, String field, String column, final ApiCallback<List<FormValueRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET1ValidateBeforeCall(taskId, field, column, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestFieldValuesUsingGET2
     * @param taskId taskId (required)
     * @param field field (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGET2Call(String taskId, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}/form-values/{field}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestFieldValuesUsingGET2ValidateBeforeCall(String taskId, String field, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getRestFieldValuesUsingGET2(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getRestFieldValuesUsingGET2(Async)");
        }
        

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET2Call(taskId, field, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve populated field values
     * Form field values that are populated through a REST backend, can be retrieved via this service
     * @param taskId taskId (required)
     * @param field field (required)
     * @return List&lt;FormValueRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormValueRepresentation> getRestFieldValuesUsingGET2(String taskId, String field) throws ApiException {
        ApiResponse<List<FormValueRepresentation>> resp = getRestFieldValuesUsingGET2WithHttpInfo(taskId, field);
        return resp.getData();
    }

    /**
     * Retrieve populated field values
     * Form field values that are populated through a REST backend, can be retrieved via this service
     * @param taskId taskId (required)
     * @param field field (required)
     * @return ApiResponse&lt;List&lt;FormValueRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormValueRepresentation>> getRestFieldValuesUsingGET2WithHttpInfo(String taskId, String field) throws ApiException {
        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET2ValidateBeforeCall(taskId, field, null, null);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve populated field values (asynchronously)
     * Form field values that are populated through a REST backend, can be retrieved via this service
     * @param taskId taskId (required)
     * @param field field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGET2Async(String taskId, String field, final ApiCallback<List<FormValueRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGET2ValidateBeforeCall(taskId, field, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskFormUsingGET
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskFormUsingGETCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskFormUsingGETValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskFormUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskFormUsingGETCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a task form
     * 
     * @param taskId taskId (required)
     * @return FormDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormDefinitionRepresentation getTaskFormUsingGET(String taskId) throws ApiException {
        ApiResponse<FormDefinitionRepresentation> resp = getTaskFormUsingGETWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get a task form
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;FormDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormDefinitionRepresentation> getTaskFormUsingGETWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskFormUsingGETValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a task form (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskFormUsingGETAsync(String taskId, final ApiCallback<FormDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskFormUsingGETValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveTaskFormUsingPOST
     * @param taskId taskId (required)
     * @param saveTaskFormRepresentation saveTaskFormRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveTaskFormUsingPOSTCall(String taskId, SaveFormRepresentation saveTaskFormRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = saveTaskFormRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/task-forms/{taskId}/save-form"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveTaskFormUsingPOSTValidateBeforeCall(String taskId, SaveFormRepresentation saveTaskFormRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling saveTaskFormUsingPOST(Async)");
        }
        
        // verify the required parameter 'saveTaskFormRepresentation' is set
        if (saveTaskFormRepresentation == null) {
            throw new ApiException("Missing the required parameter 'saveTaskFormRepresentation' when calling saveTaskFormUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = saveTaskFormUsingPOSTCall(taskId, saveTaskFormRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Save a task form
     * 
     * @param taskId taskId (required)
     * @param saveTaskFormRepresentation saveTaskFormRepresentation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveTaskFormUsingPOST(String taskId, SaveFormRepresentation saveTaskFormRepresentation) throws ApiException {
        saveTaskFormUsingPOSTWithHttpInfo(taskId, saveTaskFormRepresentation);
    }

    /**
     * Save a task form
     * 
     * @param taskId taskId (required)
     * @param saveTaskFormRepresentation saveTaskFormRepresentation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveTaskFormUsingPOSTWithHttpInfo(String taskId, SaveFormRepresentation saveTaskFormRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = saveTaskFormUsingPOSTValidateBeforeCall(taskId, saveTaskFormRepresentation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a task form (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param saveTaskFormRepresentation saveTaskFormRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveTaskFormUsingPOSTAsync(String taskId, SaveFormRepresentation saveTaskFormRepresentation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveTaskFormUsingPOSTValidateBeforeCall(taskId, saveTaskFormRepresentation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
