/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.FormValueRepresentation;
import org.activiti.engine.remote.client.model.IdentityLinkRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationProcessDefinitionRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRuntimeDecisionTableRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRuntimeFormRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessDefinitionsApi {
    private ApiClient apiClient;

    public ProcessDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessDefinitionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIdentityLinkUsingPOST
     * @param processDefinitionId processDefinitionId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOSTCall(String processDefinitionId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identityLinkRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/identitylinks"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIdentityLinkUsingPOSTValidateBeforeCall(String processDefinitionId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling createIdentityLinkUsingPOST(Async)");
        }
        
        // verify the required parameter 'identityLinkRepresentation' is set
        if (identityLinkRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityLinkRepresentation' when calling createIdentityLinkUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOSTCall(processDefinitionId, identityLinkRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a user or group involvement to a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation createIdentityLinkUsingPOST(String processDefinitionId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = createIdentityLinkUsingPOSTWithHttpInfo(processDefinitionId, identityLinkRepresentation);
        return resp.getData();
    }

    /**
     * Add a user or group involvement to a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> createIdentityLinkUsingPOSTWithHttpInfo(String processDefinitionId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createIdentityLinkUsingPOSTValidateBeforeCall(processDefinitionId, identityLinkRepresentation, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a user or group involvement to a process definition (asynchronously)
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOSTAsync(String processDefinitionId, IdentityLinkRepresentation identityLinkRepresentation, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOSTValidateBeforeCall(processDefinitionId, identityLinkRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIdentityLinkUsingDELETE
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETECall(String processDefinitionId, String family, String identityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIdentityLinkUsingDELETEValidateBeforeCall(String processDefinitionId, String family, String identityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling deleteIdentityLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling deleteIdentityLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling deleteIdentityLinkUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETECall(processDefinitionId, family, identityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a user or group involvement from a process definition
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIdentityLinkUsingDELETE(String processDefinitionId, String family, String identityId) throws ApiException {
        deleteIdentityLinkUsingDELETEWithHttpInfo(processDefinitionId, family, identityId);
    }

    /**
     * Remove a user or group involvement from a process definition
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIdentityLinkUsingDELETEWithHttpInfo(String processDefinitionId, String family, String identityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETEValidateBeforeCall(processDefinitionId, family, identityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a user or group involvement from a process definition (asynchronously)
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETEAsync(String processDefinitionId, String family, String identityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETEValidateBeforeCall(processDefinitionId, family, identityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinkTypeUsingGET
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGETCall(String processDefinitionId, String family, String identityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinkTypeUsingGETValidateBeforeCall(String processDefinitionId, String family, String identityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling getIdentityLinkTypeUsingGET(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinkTypeUsingGET(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling getIdentityLinkTypeUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGETCall(processDefinitionId, family, identityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user or group involvement with a process definition
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation getIdentityLinkTypeUsingGET(String processDefinitionId, String family, String identityId) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = getIdentityLinkTypeUsingGETWithHttpInfo(processDefinitionId, family, identityId);
        return resp.getData();
    }

    /**
     * Get a user or group involvement with a process definition
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> getIdentityLinkTypeUsingGETWithHttpInfo(String processDefinitionId, String family, String identityId) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGETValidateBeforeCall(processDefinitionId, family, identityId, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user or group involvement with a process definition (asynchronously)
     * 
     * @param processDefinitionId Process definition ID (required)
     * @param family Identity type (required)
     * @param identityId User or group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGETAsync(String processDefinitionId, String family, String identityId, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGETValidateBeforeCall(processDefinitionId, family, identityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksForFamilyUsingGET
     * @param processDefinitionId processDefinitionId (required)
     * @param family Identity type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGETCall(String processDefinitionId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGETValidateBeforeCall(String processDefinitionId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling getIdentityLinksForFamilyUsingGET(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinksForFamilyUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGETCall(processDefinitionId, family, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List either the users or groups involved with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param family Identity type (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksForFamilyUsingGET(String processDefinitionId, String family) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksForFamilyUsingGETWithHttpInfo(processDefinitionId, family);
        return resp.getData();
    }

    /**
     * List either the users or groups involved with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param family Identity type (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksForFamilyUsingGETWithHttpInfo(String processDefinitionId, String family) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGETValidateBeforeCall(processDefinitionId, family, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List either the users or groups involved with a process definition (asynchronously)
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param family Identity type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGETAsync(String processDefinitionId, String family, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGETValidateBeforeCall(processDefinitionId, family, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksUsingGET
     * @param processDefinitionId processDefinitionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGETCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/identitylinks"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksUsingGETValidateBeforeCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling getIdentityLinksUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksUsingGETCall(processDefinitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the users and groups involved with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksUsingGET(String processDefinitionId) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksUsingGETWithHttpInfo(processDefinitionId);
        return resp.getData();
    }

    /**
     * List the users and groups involved with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksUsingGETWithHttpInfo(String processDefinitionId) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksUsingGETValidateBeforeCall(processDefinitionId, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the users and groups involved with a process definition (asynchronously)
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGETAsync(String processDefinitionId, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksUsingGETValidateBeforeCall(processDefinitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessDefinitionDecisionTablesUsingGET
     * @param processDefinitionId processDefinitionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionDecisionTablesUsingGETCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/decision-tables"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessDefinitionDecisionTablesUsingGETValidateBeforeCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling getProcessDefinitionDecisionTablesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessDefinitionDecisionTablesUsingGETCall(processDefinitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the decision tables associated with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return ResultListDataRepresentationRuntimeDecisionTableRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationRuntimeDecisionTableRepresentation getProcessDefinitionDecisionTablesUsingGET(String processDefinitionId) throws ApiException {
        ApiResponse<ResultListDataRepresentationRuntimeDecisionTableRepresentation> resp = getProcessDefinitionDecisionTablesUsingGETWithHttpInfo(processDefinitionId);
        return resp.getData();
    }

    /**
     * List the decision tables associated with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationRuntimeDecisionTableRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationRuntimeDecisionTableRepresentation> getProcessDefinitionDecisionTablesUsingGETWithHttpInfo(String processDefinitionId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessDefinitionDecisionTablesUsingGETValidateBeforeCall(processDefinitionId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeDecisionTableRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the decision tables associated with a process definition (asynchronously)
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionDecisionTablesUsingGETAsync(String processDefinitionId, final ApiCallback<ResultListDataRepresentationRuntimeDecisionTableRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessDefinitionDecisionTablesUsingGETValidateBeforeCall(processDefinitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeDecisionTableRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessDefinitionFormsUsingGET
     * @param processDefinitionId processDefinitionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionFormsUsingGETCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/forms"
            .replaceAll("\\{" + "processDefinitionId" + "\\}", apiClient.escapeString(processDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessDefinitionFormsUsingGETValidateBeforeCall(String processDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDefinitionId' is set
        if (processDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'processDefinitionId' when calling getProcessDefinitionFormsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessDefinitionFormsUsingGETCall(processDefinitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the forms associated with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return ResultListDataRepresentationRuntimeFormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationRuntimeFormRepresentation getProcessDefinitionFormsUsingGET(String processDefinitionId) throws ApiException {
        ApiResponse<ResultListDataRepresentationRuntimeFormRepresentation> resp = getProcessDefinitionFormsUsingGETWithHttpInfo(processDefinitionId);
        return resp.getData();
    }

    /**
     * List the forms associated with a process definition
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationRuntimeFormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationRuntimeFormRepresentation> getProcessDefinitionFormsUsingGETWithHttpInfo(String processDefinitionId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessDefinitionFormsUsingGETValidateBeforeCall(processDefinitionId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeFormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the forms associated with a process definition (asynchronously)
     * 
     * @param processDefinitionId processDefinitionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionFormsUsingGETAsync(String processDefinitionId, final ApiCallback<ResultListDataRepresentationRuntimeFormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessDefinitionFormsUsingGETValidateBeforeCall(processDefinitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeFormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessDefinitionStartFormUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionStartFormUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/start-form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessDefinitionStartFormUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getProcessDefinitionStartFormUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the start form for a process definition
     * 
     * @return FormDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormDefinitionRepresentation getProcessDefinitionStartFormUsingGET() throws ApiException {
        ApiResponse<FormDefinitionRepresentation> resp = getProcessDefinitionStartFormUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the start form for a process definition
     * 
     * @return ApiResponse&lt;FormDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormDefinitionRepresentation> getProcessDefinitionStartFormUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProcessDefinitionStartFormUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the start form for a process definition (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionStartFormUsingGETAsync(final ApiCallback<FormDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessDefinitionStartFormUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessDefinitionsUsingGET
     * @param latest latest (optional)
     * @param appDefinitionId appDefinitionId (optional)
     * @param deploymentId deploymentId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionsUsingGETCall(Boolean latest, Long appDefinitionId, String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (latest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latest", latest));
        if (appDefinitionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appDefinitionId", appDefinitionId));
        if (deploymentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deploymentId", deploymentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessDefinitionsUsingGETValidateBeforeCall(Boolean latest, Long appDefinitionId, String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getProcessDefinitionsUsingGETCall(latest, appDefinitionId, deploymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of process definitions
     * Get a list of process definitions (visible within the tenant of the user)
     * @param latest latest (optional)
     * @param appDefinitionId appDefinitionId (optional)
     * @param deploymentId deploymentId (optional)
     * @return ResultListDataRepresentationProcessDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationProcessDefinitionRepresentation getProcessDefinitionsUsingGET(Boolean latest, Long appDefinitionId, String deploymentId) throws ApiException {
        ApiResponse<ResultListDataRepresentationProcessDefinitionRepresentation> resp = getProcessDefinitionsUsingGETWithHttpInfo(latest, appDefinitionId, deploymentId);
        return resp.getData();
    }

    /**
     * Retrieve a list of process definitions
     * Get a list of process definitions (visible within the tenant of the user)
     * @param latest latest (optional)
     * @param appDefinitionId appDefinitionId (optional)
     * @param deploymentId deploymentId (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationProcessDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationProcessDefinitionRepresentation> getProcessDefinitionsUsingGETWithHttpInfo(Boolean latest, Long appDefinitionId, String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessDefinitionsUsingGETValidateBeforeCall(latest, appDefinitionId, deploymentId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of process definitions (asynchronously)
     * Get a list of process definitions (visible within the tenant of the user)
     * @param latest latest (optional)
     * @param appDefinitionId appDefinitionId (optional)
     * @param deploymentId deploymentId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessDefinitionsUsingGETAsync(Boolean latest, Long appDefinitionId, String deploymentId, final ApiCallback<ResultListDataRepresentationProcessDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessDefinitionsUsingGETValidateBeforeCall(latest, appDefinitionId, deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestFieldValuesUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestFieldValuesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve field values (eg. the typeahead field)
     * 
     * @return List&lt;FormValueRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormValueRepresentation> getRestFieldValuesUsingGET() throws ApiException {
        ApiResponse<List<FormValueRepresentation>> resp = getRestFieldValuesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve field values (eg. the typeahead field)
     * 
     * @return ApiResponse&lt;List&lt;FormValueRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormValueRepresentation>> getRestFieldValuesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRestFieldValuesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve field values (eg. the typeahead field) (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestFieldValuesUsingGETAsync(final ApiCallback<List<FormValueRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestFieldValuesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestTableFieldValuesUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestTableFieldValuesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestTableFieldValuesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRestTableFieldValuesUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve field values (eg. the table field)
     * 
     * @return List&lt;FormValueRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormValueRepresentation> getRestTableFieldValuesUsingGET() throws ApiException {
        ApiResponse<List<FormValueRepresentation>> resp = getRestTableFieldValuesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve field values (eg. the table field)
     * 
     * @return ApiResponse&lt;List&lt;FormValueRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormValueRepresentation>> getRestTableFieldValuesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRestTableFieldValuesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve field values (eg. the table field) (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestTableFieldValuesUsingGETAsync(final ApiCallback<List<FormValueRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestTableFieldValuesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormValueRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
