/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoEndpointRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoSiteRepresenation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationAlfrescoOnpremiseApi {
    private ApiClient apiClient;

    public IntegrationAlfrescoOnpremiseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationAlfrescoOnpremiseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllSitesUsingGET1
     * @param repositoryId repositoryId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSitesUsingGET1Call(String repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco/{repositoryId}/sites"
            .replaceAll("\\{" + "repositoryId" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSitesUsingGET1ValidateBeforeCall(String repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getAllSitesUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllSitesUsingGET1Call(repositoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Alfresco sites
     * Returns ALL Sites
     * @param repositoryId repositoryId (required)
     * @return ResultListDataRepresentationAlfrescoSiteRepresenation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoSiteRepresenation getAllSitesUsingGET1(String repositoryId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoSiteRepresenation> resp = getAllSitesUsingGET1WithHttpInfo(repositoryId);
        return resp.getData();
    }

    /**
     * List Alfresco sites
     * Returns ALL Sites
     * @param repositoryId repositoryId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoSiteRepresenation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoSiteRepresenation> getAllSitesUsingGET1WithHttpInfo(String repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = getAllSitesUsingGET1ValidateBeforeCall(repositoryId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoSiteRepresenation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Alfresco sites (asynchronously)
     * Returns ALL Sites
     * @param repositoryId repositoryId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSitesUsingGET1Async(String repositoryId, final ApiCallback<ResultListDataRepresentationAlfrescoSiteRepresenation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSitesUsingGET1ValidateBeforeCall(repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoSiteRepresenation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInFolderPathUsingGET1
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param folderPath folderPath (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderPathUsingGET1Call(String repositoryId, String siteId, String folderPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content"
            .replaceAll("\\{" + "repositoryId" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "folderPath" + "\\}", apiClient.escapeString(folderPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInFolderPathUsingGET1ValidateBeforeCall(String repositoryId, String siteId, String folderPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getContentInFolderPathUsingGET1(Async)");
        }
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getContentInFolderPathUsingGET1(Async)");
        }
        
        // verify the required parameter 'folderPath' is set
        if (folderPath == null) {
            throw new ApiException("Missing the required parameter 'folderPath' when calling getContentInFolderPathUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInFolderPathUsingGET1Call(repositoryId, siteId, folderPath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific folder identified by folder path
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param folderPath folderPath (required)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInFolderPathUsingGET1(String repositoryId, String siteId, String folderPath) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInFolderPathUsingGET1WithHttpInfo(repositoryId, siteId, folderPath);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific folder identified by folder path
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param folderPath folderPath (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderPathUsingGET1WithHttpInfo(String repositoryId, String siteId, String folderPath) throws ApiException {
        com.squareup.okhttp.Call call = getContentInFolderPathUsingGET1ValidateBeforeCall(repositoryId, siteId, folderPath, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific folder identified by folder path (asynchronously)
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param folderPath folderPath (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderPathUsingGET1Async(String repositoryId, String siteId, String folderPath, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInFolderPathUsingGET1ValidateBeforeCall(repositoryId, siteId, folderPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInFolderUsingGET1
     * @param repositoryId repositoryId (required)
     * @param folderId folderId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderUsingGET1Call(String repositoryId, String folderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content"
            .replaceAll("\\{" + "repositoryId" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "folderId" + "\\}", apiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInFolderUsingGET1ValidateBeforeCall(String repositoryId, String folderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getContentInFolderUsingGET1(Async)");
        }
        
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getContentInFolderUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInFolderUsingGET1Call(repositoryId, folderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific folder
     * 
     * @param repositoryId repositoryId (required)
     * @param folderId folderId (required)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInFolderUsingGET1(String repositoryId, String folderId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInFolderUsingGET1WithHttpInfo(repositoryId, folderId);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific folder
     * 
     * @param repositoryId repositoryId (required)
     * @param folderId folderId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderUsingGET1WithHttpInfo(String repositoryId, String folderId) throws ApiException {
        com.squareup.okhttp.Call call = getContentInFolderUsingGET1ValidateBeforeCall(repositoryId, folderId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific folder (asynchronously)
     * 
     * @param repositoryId repositoryId (required)
     * @param folderId folderId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderUsingGET1Async(String repositoryId, String folderId, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInFolderUsingGET1ValidateBeforeCall(repositoryId, folderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInSiteUsingGET1
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInSiteUsingGET1Call(String repositoryId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content"
            .replaceAll("\\{" + "repositoryId" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInSiteUsingGET1ValidateBeforeCall(String repositoryId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getContentInSiteUsingGET1(Async)");
        }
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getContentInSiteUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInSiteUsingGET1Call(repositoryId, siteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific site
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInSiteUsingGET1(String repositoryId, String siteId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInSiteUsingGET1WithHttpInfo(repositoryId, siteId);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific site
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInSiteUsingGET1WithHttpInfo(String repositoryId, String siteId) throws ApiException {
        com.squareup.okhttp.Call call = getContentInSiteUsingGET1ValidateBeforeCall(repositoryId, siteId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific site (asynchronously)
     * 
     * @param repositoryId repositoryId (required)
     * @param siteId siteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInSiteUsingGET1Async(String repositoryId, String siteId, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInSiteUsingGET1ValidateBeforeCall(repositoryId, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRepositoriesUsingGET
     * @param tenantId tenantId (optional)
     * @param includeAccounts includeAccounts (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRepositoriesUsingGETCall(Long tenantId, Boolean includeAccounts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/profile/accounts/alfresco";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));
        if (includeAccounts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAccounts", includeAccounts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRepositoriesUsingGETValidateBeforeCall(Long tenantId, Boolean includeAccounts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRepositoriesUsingGETCall(tenantId, includeAccounts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Alfresco repositories
     * A tenant administrator can configure one or more Alfresco repositories to use when working with content.
     * @param tenantId tenantId (optional)
     * @param includeAccounts includeAccounts (optional, default to true)
     * @return ResultListDataRepresentationAlfrescoEndpointRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoEndpointRepresentation getRepositoriesUsingGET(Long tenantId, Boolean includeAccounts) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoEndpointRepresentation> resp = getRepositoriesUsingGETWithHttpInfo(tenantId, includeAccounts);
        return resp.getData();
    }

    /**
     * List Alfresco repositories
     * A tenant administrator can configure one or more Alfresco repositories to use when working with content.
     * @param tenantId tenantId (optional)
     * @param includeAccounts includeAccounts (optional, default to true)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoEndpointRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoEndpointRepresentation> getRepositoriesUsingGETWithHttpInfo(Long tenantId, Boolean includeAccounts) throws ApiException {
        com.squareup.okhttp.Call call = getRepositoriesUsingGETValidateBeforeCall(tenantId, includeAccounts, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoEndpointRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Alfresco repositories (asynchronously)
     * A tenant administrator can configure one or more Alfresco repositories to use when working with content.
     * @param tenantId tenantId (optional)
     * @param includeAccounts includeAccounts (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRepositoriesUsingGETAsync(Long tenantId, Boolean includeAccounts, final ApiCallback<ResultListDataRepresentationAlfrescoEndpointRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRepositoriesUsingGETValidateBeforeCall(tenantId, includeAccounts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoEndpointRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
