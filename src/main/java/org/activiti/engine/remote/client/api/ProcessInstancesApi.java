/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.CreateProcessInstanceRepresentation;
import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.HistoricProcessInstanceQueryRepresentation;
import org.activiti.engine.remote.client.model.IdentityLinkRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceAuditInfoRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceFilterRequestRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceQueryRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceVariableRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationDecisionTaskRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationProcessContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationProcessInstanceRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessInstancesApi {
    private ApiClient apiClient;

    public ProcessInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessInstancesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for activateProcessInstanceUsingPUT
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateProcessInstanceUsingPUTCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/activate"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateProcessInstanceUsingPUTValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling activateProcessInstanceUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = activateProcessInstanceUsingPUTCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Activate a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceRepresentation activateProcessInstanceUsingPUT(String processInstanceId) throws ApiException {
        ApiResponse<ProcessInstanceRepresentation> resp = activateProcessInstanceUsingPUTWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Activate a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceRepresentation> activateProcessInstanceUsingPUTWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = activateProcessInstanceUsingPUTValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Activate a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateProcessInstanceUsingPUTAsync(String processInstanceId, final ApiCallback<ProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateProcessInstanceUsingPUTValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createIdentityLinkUsingPOST1
     * @param processInstanceId processInstanceId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOST1Call(String processInstanceId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identityLinkRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/identitylinks"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIdentityLinkUsingPOST1ValidateBeforeCall(String processInstanceId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling createIdentityLinkUsingPOST1(Async)");
        }
        
        // verify the required parameter 'identityLinkRepresentation' is set
        if (identityLinkRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityLinkRepresentation' when calling createIdentityLinkUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST1Call(processInstanceId, identityLinkRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a user or group involvement to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation createIdentityLinkUsingPOST1(String processInstanceId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = createIdentityLinkUsingPOST1WithHttpInfo(processInstanceId, identityLinkRepresentation);
        return resp.getData();
    }

    /**
     * Add a user or group involvement to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> createIdentityLinkUsingPOST1WithHttpInfo(String processInstanceId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST1ValidateBeforeCall(processInstanceId, identityLinkRepresentation, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a user or group involvement to a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOST1Async(String processInstanceId, IdentityLinkRepresentation identityLinkRepresentation, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST1ValidateBeforeCall(processInstanceId, identityLinkRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIdentityLinkUsingDELETE1
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE1Call(String processInstanceId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE1ValidateBeforeCall(String processInstanceId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling deleteIdentityLinkUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling deleteIdentityLinkUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling deleteIdentityLinkUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteIdentityLinkUsingDELETE1(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE1Call(processInstanceId, family, identityId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a user or group involvement from a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIdentityLinkUsingDELETE1(String processInstanceId, String family, String identityId, String type) throws ApiException {
        deleteIdentityLinkUsingDELETE1WithHttpInfo(processInstanceId, family, identityId, type);
    }

    /**
     * Remove a user or group involvement from a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIdentityLinkUsingDELETE1WithHttpInfo(String processInstanceId, String family, String identityId, String type) throws ApiException {
        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE1ValidateBeforeCall(processInstanceId, family, identityId, type, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a user or group involvement from a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE1Async(String processInstanceId, String family, String identityId, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE1ValidateBeforeCall(processInstanceId, family, identityId, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProcessInstanceUsingDELETE
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProcessInstanceUsingDELETECall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProcessInstanceUsingDELETEValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling deleteProcessInstanceUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProcessInstanceUsingDELETECall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel or remove a process instance
     * If the process instance has not yet been completed, it will be cancelled. If it has already finished or been cancelled then the process instance will be removed and will no longer appear in queries.
     * @param processInstanceId processInstanceId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProcessInstanceUsingDELETE(String processInstanceId) throws ApiException {
        deleteProcessInstanceUsingDELETEWithHttpInfo(processInstanceId);
    }

    /**
     * Cancel or remove a process instance
     * If the process instance has not yet been completed, it will be cancelled. If it has already finished or been cancelled then the process instance will be removed and will no longer appear in queries.
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProcessInstanceUsingDELETEWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProcessInstanceUsingDELETEValidateBeforeCall(processInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel or remove a process instance (asynchronously)
     * If the process instance has not yet been completed, it will be cancelled. If it has already finished or been cancelled then the process instance will be removed and will no longer appear in queries.
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProcessInstanceUsingDELETEAsync(String processInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProcessInstanceUsingDELETEValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for filterProcessInstancesUsingPOST
     * @param filterRequest filterRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filterProcessInstancesUsingPOSTCall(ProcessInstanceFilterRequestRepresentation filterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filterRequest;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filterProcessInstancesUsingPOSTValidateBeforeCall(ProcessInstanceFilterRequestRepresentation filterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling filterProcessInstancesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = filterProcessInstancesUsingPOSTCall(filterRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List process instances using a filter
     * The request body provided must define either a valid filterId value or filter object
     * @param filterRequest filterRequest (required)
     * @return ResultListDataRepresentationProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationProcessInstanceRepresentation filterProcessInstancesUsingPOST(ProcessInstanceFilterRequestRepresentation filterRequest) throws ApiException {
        ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> resp = filterProcessInstancesUsingPOSTWithHttpInfo(filterRequest);
        return resp.getData();
    }

    /**
     * List process instances using a filter
     * The request body provided must define either a valid filterId value or filter object
     * @param filterRequest filterRequest (required)
     * @return ApiResponse&lt;ResultListDataRepresentationProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> filterProcessInstancesUsingPOSTWithHttpInfo(ProcessInstanceFilterRequestRepresentation filterRequest) throws ApiException {
        com.squareup.okhttp.Call call = filterProcessInstancesUsingPOSTValidateBeforeCall(filterRequest, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List process instances using a filter (asynchronously)
     * The request body provided must define either a valid filterId value or filter object
     * @param filterRequest filterRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filterProcessInstancesUsingPOSTAsync(ProcessInstanceFilterRequestRepresentation filterRequest, final ApiCallback<ResultListDataRepresentationProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filterProcessInstancesUsingPOSTValidateBeforeCall(filterRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoricProcessInstanceDecisionTasksUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstanceDecisionTasksUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/decision-tasks"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoricProcessInstanceDecisionTasksUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getHistoricProcessInstanceDecisionTasksUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getHistoricProcessInstanceDecisionTasksUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get decision tasks in a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ResultListDataRepresentationDecisionTaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationDecisionTaskRepresentation getHistoricProcessInstanceDecisionTasksUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<ResultListDataRepresentationDecisionTaskRepresentation> resp = getHistoricProcessInstanceDecisionTasksUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get decision tasks in a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationDecisionTaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationDecisionTaskRepresentation> getHistoricProcessInstanceDecisionTasksUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getHistoricProcessInstanceDecisionTasksUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationDecisionTaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get decision tasks in a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstanceDecisionTasksUsingGETAsync(String processInstanceId, final ApiCallback<ResultListDataRepresentationDecisionTaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoricProcessInstanceDecisionTasksUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationDecisionTaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoricProcessInstanceVariablesUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstanceVariablesUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/historic-variables"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoricProcessInstanceVariablesUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getHistoricProcessInstanceVariablesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getHistoricProcessInstanceVariablesUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get historic variables for a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return List&lt;ProcessInstanceVariableRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProcessInstanceVariableRepresentation> getHistoricProcessInstanceVariablesUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<List<ProcessInstanceVariableRepresentation>> resp = getHistoricProcessInstanceVariablesUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get historic variables for a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;List&lt;ProcessInstanceVariableRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProcessInstanceVariableRepresentation>> getHistoricProcessInstanceVariablesUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getHistoricProcessInstanceVariablesUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<List<ProcessInstanceVariableRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get historic variables for a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstanceVariablesUsingGETAsync(String processInstanceId, final ApiCallback<List<ProcessInstanceVariableRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoricProcessInstanceVariablesUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProcessInstanceVariableRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoricProcessInstancesUsingPOST
     * @param queryRequest queryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstancesUsingPOSTCall(HistoricProcessInstanceQueryRepresentation queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/enterprise/historic-process-instances/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoricProcessInstancesUsingPOSTValidateBeforeCall(HistoricProcessInstanceQueryRepresentation queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling getHistoricProcessInstancesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getHistoricProcessInstancesUsingPOSTCall(queryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query historic process instances
     * 
     * @param queryRequest queryRequest (required)
     * @return ResultListDataRepresentationProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationProcessInstanceRepresentation getHistoricProcessInstancesUsingPOST(HistoricProcessInstanceQueryRepresentation queryRequest) throws ApiException {
        ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> resp = getHistoricProcessInstancesUsingPOSTWithHttpInfo(queryRequest);
        return resp.getData();
    }

    /**
     * Query historic process instances
     * 
     * @param queryRequest queryRequest (required)
     * @return ApiResponse&lt;ResultListDataRepresentationProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> getHistoricProcessInstancesUsingPOSTWithHttpInfo(HistoricProcessInstanceQueryRepresentation queryRequest) throws ApiException {
        com.squareup.okhttp.Call call = getHistoricProcessInstancesUsingPOSTValidateBeforeCall(queryRequest, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query historic process instances (asynchronously)
     * 
     * @param queryRequest queryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoricProcessInstancesUsingPOSTAsync(HistoricProcessInstanceQueryRepresentation queryRequest, final ApiCallback<ResultListDataRepresentationProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoricProcessInstancesUsingPOSTValidateBeforeCall(queryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinkTypeUsingGET1
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGET1Call(String processInstanceId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinkTypeUsingGET1ValidateBeforeCall(String processInstanceId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getIdentityLinkTypeUsingGET1(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinkTypeUsingGET1(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling getIdentityLinkTypeUsingGET1(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getIdentityLinkTypeUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET1Call(processInstanceId, family, identityId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user or group involvement with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation getIdentityLinkTypeUsingGET1(String processInstanceId, String family, String identityId, String type) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = getIdentityLinkTypeUsingGET1WithHttpInfo(processInstanceId, family, identityId, type);
        return resp.getData();
    }

    /**
     * Get a user or group involvement with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> getIdentityLinkTypeUsingGET1WithHttpInfo(String processInstanceId, String family, String identityId, String type) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET1ValidateBeforeCall(processInstanceId, family, identityId, type, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user or group involvement with a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGET1Async(String processInstanceId, String family, String identityId, String type, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET1ValidateBeforeCall(processInstanceId, family, identityId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksForFamilyUsingGET1
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET1Call(String processInstanceId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/identitylinks/{family}"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET1ValidateBeforeCall(String processInstanceId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getIdentityLinksForFamilyUsingGET1(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinksForFamilyUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET1Call(processInstanceId, family, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List either the users or groups involved with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksForFamilyUsingGET1(String processInstanceId, String family) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksForFamilyUsingGET1WithHttpInfo(processInstanceId, family);
        return resp.getData();
    }

    /**
     * List either the users or groups involved with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksForFamilyUsingGET1WithHttpInfo(String processInstanceId, String family) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET1ValidateBeforeCall(processInstanceId, family, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List either the users or groups involved with a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param family family (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET1Async(String processInstanceId, String family, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET1ValidateBeforeCall(processInstanceId, family, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksUsingGET1
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGET1Call(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/identitylinks"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksUsingGET1ValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getIdentityLinksUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksUsingGET1Call(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the users and groups involved with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksUsingGET1(String processInstanceId) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksUsingGET1WithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * List the users and groups involved with a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksUsingGET1WithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksUsingGET1ValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the users and groups involved with a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGET1Async(String processInstanceId, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksUsingGET1ValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessInstanceContentUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceContentUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/field-content"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstanceContentUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getProcessInstanceContentUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstanceContentUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List content attached to process instance fields
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ResultListDataRepresentationProcessContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationProcessContentRepresentation getProcessInstanceContentUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<ResultListDataRepresentationProcessContentRepresentation> resp = getProcessInstanceContentUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * List content attached to process instance fields
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationProcessContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationProcessContentRepresentation> getProcessInstanceContentUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstanceContentUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List content attached to process instance fields (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceContentUsingGETAsync(String processInstanceId, final ApiCallback<ResultListDataRepresentationProcessContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstanceContentUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessInstanceDiagramUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceDiagramUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/diagram"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstanceDiagramUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getProcessInstanceDiagramUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstanceDiagramUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the process diagram for the process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<byte[]> getProcessInstanceDiagramUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<List<byte[]>> resp = getProcessInstanceDiagramUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get the process diagram for the process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<byte[]>> getProcessInstanceDiagramUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstanceDiagramUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the process diagram for the process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceDiagramUsingGETAsync(String processInstanceId, final ApiCallback<List<byte[]>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstanceDiagramUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessInstanceStartFormUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceStartFormUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/start-form"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstanceStartFormUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getProcessInstanceStartFormUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstanceStartFormUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a process instance start form
     * The start form for a process instance can be retrieved when the process definition has a start form defined (hasStartForm &#x3D; true on the process instance)
     * @param processInstanceId processInstanceId (required)
     * @return FormDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormDefinitionRepresentation getProcessInstanceStartFormUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<FormDefinitionRepresentation> resp = getProcessInstanceStartFormUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get a process instance start form
     * The start form for a process instance can be retrieved when the process definition has a start form defined (hasStartForm &#x3D; true on the process instance)
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;FormDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormDefinitionRepresentation> getProcessInstanceStartFormUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstanceStartFormUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a process instance start form (asynchronously)
     * The start form for a process instance can be retrieved when the process definition has a start form defined (hasStartForm &#x3D; true on the process instance)
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceStartFormUsingGETAsync(String processInstanceId, final ApiCallback<FormDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstanceStartFormUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessInstanceUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstanceUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getProcessInstanceUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstanceUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceRepresentation getProcessInstanceUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<ProcessInstanceRepresentation> resp = getProcessInstanceUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceRepresentation> getProcessInstanceUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstanceUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstanceUsingGETAsync(String processInstanceId, final ApiCallback<ProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstanceUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessInstancesUsingPOST
     * @param processInstancesQuery processInstancesQuery (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessInstancesUsingPOSTCall(ProcessInstanceQueryRepresentation processInstancesQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processInstancesQuery;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessInstancesUsingPOSTValidateBeforeCall(ProcessInstanceQueryRepresentation processInstancesQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstancesQuery' is set
        if (processInstancesQuery == null) {
            throw new ApiException("Missing the required parameter 'processInstancesQuery' when calling getProcessInstancesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessInstancesUsingPOSTCall(processInstancesQuery, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query process instances
     * 
     * @param processInstancesQuery processInstancesQuery (required)
     * @return ResultListDataRepresentationProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationProcessInstanceRepresentation getProcessInstancesUsingPOST(ProcessInstanceQueryRepresentation processInstancesQuery) throws ApiException {
        ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> resp = getProcessInstancesUsingPOSTWithHttpInfo(processInstancesQuery);
        return resp.getData();
    }

    /**
     * Query process instances
     * 
     * @param processInstancesQuery processInstancesQuery (required)
     * @return ApiResponse&lt;ResultListDataRepresentationProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationProcessInstanceRepresentation> getProcessInstancesUsingPOSTWithHttpInfo(ProcessInstanceQueryRepresentation processInstancesQuery) throws ApiException {
        com.squareup.okhttp.Call call = getProcessInstancesUsingPOSTValidateBeforeCall(processInstancesQuery, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query process instances (asynchronously)
     * 
     * @param processInstancesQuery processInstancesQuery (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessInstancesUsingPOSTAsync(ProcessInstanceQueryRepresentation processInstancesQuery, final ApiCallback<ResultListDataRepresentationProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessInstancesUsingPOSTValidateBeforeCall(processInstancesQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskAuditLogUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskAuditLogUsingGETCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/audit-log"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskAuditLogUsingGETValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getTaskAuditLogUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskAuditLogUsingGETCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the audit log for a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ProcessInstanceAuditInfoRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceAuditInfoRepresentation getTaskAuditLogUsingGET(String processInstanceId) throws ApiException {
        ApiResponse<ProcessInstanceAuditInfoRepresentation> resp = getTaskAuditLogUsingGETWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Get the audit log for a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ProcessInstanceAuditInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceAuditInfoRepresentation> getTaskAuditLogUsingGETWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskAuditLogUsingGETValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceAuditInfoRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the audit log for a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskAuditLogUsingGETAsync(String processInstanceId, final ApiCallback<ProcessInstanceAuditInfoRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskAuditLogUsingGETValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceAuditInfoRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startNewProcessInstanceUsingPOST
     * @param startRequest startRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startNewProcessInstanceUsingPOSTCall(CreateProcessInstanceRepresentation startRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = startRequest;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startNewProcessInstanceUsingPOSTValidateBeforeCall(CreateProcessInstanceRepresentation startRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startRequest' is set
        if (startRequest == null) {
            throw new ApiException("Missing the required parameter 'startRequest' when calling startNewProcessInstanceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = startNewProcessInstanceUsingPOSTCall(startRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a process instance
     * 
     * @param startRequest startRequest (required)
     * @return ProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceRepresentation startNewProcessInstanceUsingPOST(CreateProcessInstanceRepresentation startRequest) throws ApiException {
        ApiResponse<ProcessInstanceRepresentation> resp = startNewProcessInstanceUsingPOSTWithHttpInfo(startRequest);
        return resp.getData();
    }

    /**
     * Start a process instance
     * 
     * @param startRequest startRequest (required)
     * @return ApiResponse&lt;ProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceRepresentation> startNewProcessInstanceUsingPOSTWithHttpInfo(CreateProcessInstanceRepresentation startRequest) throws ApiException {
        com.squareup.okhttp.Call call = startNewProcessInstanceUsingPOSTValidateBeforeCall(startRequest, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start a process instance (asynchronously)
     * 
     * @param startRequest startRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startNewProcessInstanceUsingPOSTAsync(CreateProcessInstanceRepresentation startRequest, final ApiCallback<ProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startNewProcessInstanceUsingPOSTValidateBeforeCall(startRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suspendProcessInstanceUsingPUT
     * @param processInstanceId processInstanceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suspendProcessInstanceUsingPUTCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/suspend"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suspendProcessInstanceUsingPUTValidateBeforeCall(String processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling suspendProcessInstanceUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = suspendProcessInstanceUsingPUTCall(processInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Suspend a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ProcessInstanceRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceRepresentation suspendProcessInstanceUsingPUT(String processInstanceId) throws ApiException {
        ApiResponse<ProcessInstanceRepresentation> resp = suspendProcessInstanceUsingPUTWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Suspend a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @return ApiResponse&lt;ProcessInstanceRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceRepresentation> suspendProcessInstanceUsingPUTWithHttpInfo(String processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = suspendProcessInstanceUsingPUTValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Suspend a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suspendProcessInstanceUsingPUTAsync(String processInstanceId, final ApiCallback<ProcessInstanceRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suspendProcessInstanceUsingPUTValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
