/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.HistoricTaskInstanceQueryRepresentation;
import org.activiti.engine.remote.client.model.IdentityLinkRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationTaskRepresentation;
import org.activiti.engine.remote.client.model.TaskAuditInfoRepresentation;
import org.activiti.engine.remote.client.model.TaskFilterRequestRepresentation;
import org.activiti.engine.remote.client.model.TaskQueryRepresentation;
import org.activiti.engine.remote.client.model.TaskRepresentation;
import org.activiti.engine.remote.client.model.TaskUpdateRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient apiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createIdentityLinkUsingPOST2
     * @param taskId taskId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOST2Call(String taskId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identityLinkRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/identitylinks"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIdentityLinkUsingPOST2ValidateBeforeCall(String taskId, IdentityLinkRepresentation identityLinkRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createIdentityLinkUsingPOST2(Async)");
        }
        
        // verify the required parameter 'identityLinkRepresentation' is set
        if (identityLinkRepresentation == null) {
            throw new ApiException("Missing the required parameter 'identityLinkRepresentation' when calling createIdentityLinkUsingPOST2(Async)");
        }
        

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST2Call(taskId, identityLinkRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the users and groups involved with a task
     * 
     * @param taskId taskId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation createIdentityLinkUsingPOST2(String taskId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = createIdentityLinkUsingPOST2WithHttpInfo(taskId, identityLinkRepresentation);
        return resp.getData();
    }

    /**
     * List the users and groups involved with a task
     * 
     * @param taskId taskId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> createIdentityLinkUsingPOST2WithHttpInfo(String taskId, IdentityLinkRepresentation identityLinkRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST2ValidateBeforeCall(taskId, identityLinkRepresentation, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the users and groups involved with a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param identityLinkRepresentation identityLinkRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIdentityLinkUsingPOST2Async(String taskId, IdentityLinkRepresentation identityLinkRepresentation, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIdentityLinkUsingPOST2ValidateBeforeCall(taskId, identityLinkRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNewTaskUsingPOST
     * @param taskRepresentation taskRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewTaskUsingPOSTCall(TaskRepresentation taskRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewTaskUsingPOSTValidateBeforeCall(TaskRepresentation taskRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskRepresentation' is set
        if (taskRepresentation == null) {
            throw new ApiException("Missing the required parameter 'taskRepresentation' when calling createNewTaskUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createNewTaskUsingPOSTCall(taskRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a standalone task
     * A standalone task is one which is not associated with any process instance.
     * @param taskRepresentation taskRepresentation (required)
     * @return TaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskRepresentation createNewTaskUsingPOST(TaskRepresentation taskRepresentation) throws ApiException {
        ApiResponse<TaskRepresentation> resp = createNewTaskUsingPOSTWithHttpInfo(taskRepresentation);
        return resp.getData();
    }

    /**
     * Create a standalone task
     * A standalone task is one which is not associated with any process instance.
     * @param taskRepresentation taskRepresentation (required)
     * @return ApiResponse&lt;TaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskRepresentation> createNewTaskUsingPOSTWithHttpInfo(TaskRepresentation taskRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createNewTaskUsingPOSTValidateBeforeCall(taskRepresentation, null, null);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a standalone task (asynchronously)
     * A standalone task is one which is not associated with any process instance.
     * @param taskRepresentation taskRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewTaskUsingPOSTAsync(TaskRepresentation taskRepresentation, final ApiCallback<TaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewTaskUsingPOSTValidateBeforeCall(taskRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteIdentityLinkUsingDELETE2
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE2Call(String taskId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE2ValidateBeforeCall(String taskId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteIdentityLinkUsingDELETE2(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling deleteIdentityLinkUsingDELETE2(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling deleteIdentityLinkUsingDELETE2(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteIdentityLinkUsingDELETE2(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE2Call(taskId, family, identityId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a user or group involvement from a task
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIdentityLinkUsingDELETE2(String taskId, String family, String identityId, String type) throws ApiException {
        deleteIdentityLinkUsingDELETE2WithHttpInfo(taskId, family, identityId, type);
    }

    /**
     * Remove a user or group involvement from a task
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIdentityLinkUsingDELETE2WithHttpInfo(String taskId, String family, String identityId, String type) throws ApiException {
        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE2ValidateBeforeCall(taskId, family, identityId, type, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a user or group involvement from a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityLinkUsingDELETE2Async(String taskId, String family, String identityId, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIdentityLinkUsingDELETE2ValidateBeforeCall(taskId, family, identityId, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTaskUsingDELETE
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaskUsingDELETECall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaskUsingDELETEValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTaskUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaskUsingDELETECall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a task
     * 
     * @param taskId taskId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaskUsingDELETE(String taskId) throws ApiException {
        deleteTaskUsingDELETEWithHttpInfo(taskId);
    }

    /**
     * Delete a task
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaskUsingDELETEWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskUsingDELETEValidateBeforeCall(taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskUsingDELETEAsync(String taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskUsingDELETEValidateBeforeCall(taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for filterTasksUsingPOST
     * @param tasksFilter tasksFilter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filterTasksUsingPOSTCall(TaskFilterRequestRepresentation tasksFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tasksFilter;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filterTasksUsingPOSTValidateBeforeCall(TaskFilterRequestRepresentation tasksFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tasksFilter' is set
        if (tasksFilter == null) {
            throw new ApiException("Missing the required parameter 'tasksFilter' when calling filterTasksUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = filterTasksUsingPOSTCall(tasksFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Filter a list of tasks
     * 
     * @param tasksFilter tasksFilter (required)
     * @return ResultListDataRepresentationTaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationTaskRepresentation filterTasksUsingPOST(TaskFilterRequestRepresentation tasksFilter) throws ApiException {
        ApiResponse<ResultListDataRepresentationTaskRepresentation> resp = filterTasksUsingPOSTWithHttpInfo(tasksFilter);
        return resp.getData();
    }

    /**
     * Filter a list of tasks
     * 
     * @param tasksFilter tasksFilter (required)
     * @return ApiResponse&lt;ResultListDataRepresentationTaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationTaskRepresentation> filterTasksUsingPOSTWithHttpInfo(TaskFilterRequestRepresentation tasksFilter) throws ApiException {
        com.squareup.okhttp.Call call = filterTasksUsingPOSTValidateBeforeCall(tasksFilter, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filter a list of tasks (asynchronously)
     * 
     * @param tasksFilter tasksFilter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filterTasksUsingPOSTAsync(TaskFilterRequestRepresentation tasksFilter, final ApiCallback<ResultListDataRepresentationTaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filterTasksUsingPOSTValidateBeforeCall(tasksFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinkTypeUsingGET2
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGET2Call(String taskId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()))
            .replaceAll("\\{" + "identityId" + "\\}", apiClient.escapeString(identityId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinkTypeUsingGET2ValidateBeforeCall(String taskId, String family, String identityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getIdentityLinkTypeUsingGET2(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinkTypeUsingGET2(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling getIdentityLinkTypeUsingGET2(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getIdentityLinkTypeUsingGET2(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET2Call(taskId, family, identityId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user or group involvement with a task
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return IdentityLinkRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityLinkRepresentation getIdentityLinkTypeUsingGET2(String taskId, String family, String identityId, String type) throws ApiException {
        ApiResponse<IdentityLinkRepresentation> resp = getIdentityLinkTypeUsingGET2WithHttpInfo(taskId, family, identityId, type);
        return resp.getData();
    }

    /**
     * Get a user or group involvement with a task
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @return ApiResponse&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityLinkRepresentation> getIdentityLinkTypeUsingGET2WithHttpInfo(String taskId, String family, String identityId, String type) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET2ValidateBeforeCall(taskId, family, identityId, type, null, null);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user or group involvement with a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param identityId identityId (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinkTypeUsingGET2Async(String taskId, String family, String identityId, String type, final ApiCallback<IdentityLinkRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinkTypeUsingGET2ValidateBeforeCall(taskId, family, identityId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityLinkRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksForFamilyUsingGET2
     * @param taskId taskId (required)
     * @param family family (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET2Call(String taskId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/identitylinks/{family}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "family" + "\\}", apiClient.escapeString(family.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET2ValidateBeforeCall(String taskId, String family, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getIdentityLinksForFamilyUsingGET2(Async)");
        }
        
        // verify the required parameter 'family' is set
        if (family == null) {
            throw new ApiException("Missing the required parameter 'family' when calling getIdentityLinksForFamilyUsingGET2(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET2Call(taskId, family, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List either the users or groups involved with a process instance
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksForFamilyUsingGET2(String taskId, String family) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksForFamilyUsingGET2WithHttpInfo(taskId, family);
        return resp.getData();
    }

    /**
     * List either the users or groups involved with a process instance
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksForFamilyUsingGET2WithHttpInfo(String taskId, String family) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET2ValidateBeforeCall(taskId, family, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List either the users or groups involved with a process instance (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param family family (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksForFamilyUsingGET2Async(String taskId, String family, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksForFamilyUsingGET2ValidateBeforeCall(taskId, family, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdentityLinksUsingGET2
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGET2Call(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/identitylinks"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdentityLinksUsingGET2ValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getIdentityLinksUsingGET2(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdentityLinksUsingGET2Call(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getIdentityLinks
     * 
     * @param taskId taskId (required)
     * @return List&lt;IdentityLinkRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentityLinkRepresentation> getIdentityLinksUsingGET2(String taskId) throws ApiException {
        ApiResponse<List<IdentityLinkRepresentation>> resp = getIdentityLinksUsingGET2WithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * getIdentityLinks
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;List&lt;IdentityLinkRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentityLinkRepresentation>> getIdentityLinksUsingGET2WithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getIdentityLinksUsingGET2ValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getIdentityLinks (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdentityLinksUsingGET2Async(String taskId, final ApiCallback<List<IdentityLinkRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdentityLinksUsingGET2ValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentityLinkRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskAuditLogUsingGET1
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskAuditLogUsingGET1Call(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/audit"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskAuditLogUsingGET1ValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskAuditLogUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskAuditLogUsingGET1Call(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the audit log for a task
     * 
     * @param taskId taskId (required)
     * @return TaskAuditInfoRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskAuditInfoRepresentation getTaskAuditLogUsingGET1(String taskId) throws ApiException {
        ApiResponse<TaskAuditInfoRepresentation> resp = getTaskAuditLogUsingGET1WithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get the audit log for a task
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;TaskAuditInfoRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskAuditInfoRepresentation> getTaskAuditLogUsingGET1WithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskAuditLogUsingGET1ValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskAuditInfoRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the audit log for a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskAuditLogUsingGET1Async(String taskId, final ApiCallback<TaskAuditInfoRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskAuditLogUsingGET1ValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskAuditInfoRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskUsingGET
     * @param taskId taskId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskUsingGETCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskUsingGETValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskUsingGETCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a task
     * 
     * @param taskId taskId (required)
     * @return TaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskRepresentation getTaskUsingGET(String taskId) throws ApiException {
        ApiResponse<TaskRepresentation> resp = getTaskUsingGETWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get a task
     * 
     * @param taskId taskId (required)
     * @return ApiResponse&lt;TaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskRepresentation> getTaskUsingGETWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskUsingGETValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskUsingGETAsync(String taskId, final ApiCallback<TaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskUsingGETValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listHistoricTasksUsingPOST
     * @param queryRequest queryRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listHistoricTasksUsingPOSTCall(HistoricTaskInstanceQueryRepresentation queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/enterprise/historic-tasks/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listHistoricTasksUsingPOSTValidateBeforeCall(HistoricTaskInstanceQueryRepresentation queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling listHistoricTasksUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = listHistoricTasksUsingPOSTCall(queryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query historic tasks
     * 
     * @param queryRequest queryRequest (required)
     * @return ResultListDataRepresentationTaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationTaskRepresentation listHistoricTasksUsingPOST(HistoricTaskInstanceQueryRepresentation queryRequest) throws ApiException {
        ApiResponse<ResultListDataRepresentationTaskRepresentation> resp = listHistoricTasksUsingPOSTWithHttpInfo(queryRequest);
        return resp.getData();
    }

    /**
     * Query historic tasks
     * 
     * @param queryRequest queryRequest (required)
     * @return ApiResponse&lt;ResultListDataRepresentationTaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationTaskRepresentation> listHistoricTasksUsingPOSTWithHttpInfo(HistoricTaskInstanceQueryRepresentation queryRequest) throws ApiException {
        com.squareup.okhttp.Call call = listHistoricTasksUsingPOSTValidateBeforeCall(queryRequest, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query historic tasks (asynchronously)
     * 
     * @param queryRequest queryRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHistoricTasksUsingPOSTAsync(HistoricTaskInstanceQueryRepresentation queryRequest, final ApiCallback<ResultListDataRepresentationTaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHistoricTasksUsingPOSTValidateBeforeCall(queryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTasksUsingPOST
     * @param tasksQuery tasksQuery (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTasksUsingPOSTCall(TaskQueryRepresentation tasksQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tasksQuery;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTasksUsingPOSTValidateBeforeCall(TaskQueryRepresentation tasksQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tasksQuery' is set
        if (tasksQuery == null) {
            throw new ApiException("Missing the required parameter 'tasksQuery' when calling listTasksUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = listTasksUsingPOSTCall(tasksQuery, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List tasks
     * 
     * @param tasksQuery tasksQuery (required)
     * @return ResultListDataRepresentationTaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationTaskRepresentation listTasksUsingPOST(TaskQueryRepresentation tasksQuery) throws ApiException {
        ApiResponse<ResultListDataRepresentationTaskRepresentation> resp = listTasksUsingPOSTWithHttpInfo(tasksQuery);
        return resp.getData();
    }

    /**
     * List tasks
     * 
     * @param tasksQuery tasksQuery (required)
     * @return ApiResponse&lt;ResultListDataRepresentationTaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationTaskRepresentation> listTasksUsingPOSTWithHttpInfo(TaskQueryRepresentation tasksQuery) throws ApiException {
        com.squareup.okhttp.Call call = listTasksUsingPOSTValidateBeforeCall(tasksQuery, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List tasks (asynchronously)
     * 
     * @param tasksQuery tasksQuery (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTasksUsingPOSTAsync(TaskQueryRepresentation tasksQuery, final ApiCallback<ResultListDataRepresentationTaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTasksUsingPOSTValidateBeforeCall(tasksQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationTaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaskUsingPUT
     * @param taskId taskId (required)
     * @param updated updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaskUsingPUTCall(String taskId, TaskUpdateRepresentation updated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updated;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskUsingPUTValidateBeforeCall(String taskId, TaskUpdateRepresentation updated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskUsingPUT(Async)");
        }
        
        // verify the required parameter 'updated' is set
        if (updated == null) {
            throw new ApiException("Missing the required parameter 'updated' when calling updateTaskUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaskUsingPUTCall(taskId, updated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a task
     * You can edit only name, description and dueDate (ISO 8601 string).
     * @param taskId taskId (required)
     * @param updated updated (required)
     * @return TaskRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskRepresentation updateTaskUsingPUT(String taskId, TaskUpdateRepresentation updated) throws ApiException {
        ApiResponse<TaskRepresentation> resp = updateTaskUsingPUTWithHttpInfo(taskId, updated);
        return resp.getData();
    }

    /**
     * Update a task
     * You can edit only name, description and dueDate (ISO 8601 string).
     * @param taskId taskId (required)
     * @param updated updated (required)
     * @return ApiResponse&lt;TaskRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskRepresentation> updateTaskUsingPUTWithHttpInfo(String taskId, TaskUpdateRepresentation updated) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskUsingPUTValidateBeforeCall(taskId, updated, null, null);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a task (asynchronously)
     * You can edit only name, description and dueDate (ISO 8601 string).
     * @param taskId taskId (required)
     * @param updated updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskUsingPUTAsync(String taskId, TaskUpdateRepresentation updated, final ApiCallback<TaskRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskUsingPUTValidateBeforeCall(taskId, updated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
