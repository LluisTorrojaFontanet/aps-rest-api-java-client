/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.activiti.engine.remote.client.model.ModelRepresentation;
import org.activiti.engine.remote.client.model.ObjectNode;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationModelRepresentation;
import org.activiti.engine.remote.client.model.ValidationErrorRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelsApi {
    private ApiClient apiClient;

    public ModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createModelUsingPOST
     * @param modelRepresentation modelRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createModelUsingPOSTCall(ModelRepresentation modelRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createModelUsingPOSTValidateBeforeCall(ModelRepresentation modelRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelRepresentation' is set
        if (modelRepresentation == null) {
            throw new ApiException("Missing the required parameter 'modelRepresentation' when calling createModelUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createModelUsingPOSTCall(modelRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new model
     * 
     * @param modelRepresentation modelRepresentation (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation createModelUsingPOST(ModelRepresentation modelRepresentation) throws ApiException {
        ApiResponse<ModelRepresentation> resp = createModelUsingPOSTWithHttpInfo(modelRepresentation);
        return resp.getData();
    }

    /**
     * Create a new model
     * 
     * @param modelRepresentation modelRepresentation (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> createModelUsingPOSTWithHttpInfo(ModelRepresentation modelRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createModelUsingPOSTValidateBeforeCall(modelRepresentation, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new model (asynchronously)
     * 
     * @param modelRepresentation modelRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createModelUsingPOSTAsync(ModelRepresentation modelRepresentation, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createModelUsingPOSTValidateBeforeCall(modelRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModelUsingDELETE
     * @param modelId modelId (required)
     * @param cascade cascade (optional)
     * @param deleteRuntimeApp deleteRuntimeApp (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelUsingDELETECall(Long modelId, Boolean cascade, Boolean deleteRuntimeApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cascade", cascade));
        if (deleteRuntimeApp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleteRuntimeApp", deleteRuntimeApp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelUsingDELETEValidateBeforeCall(Long modelId, Boolean cascade, Boolean deleteRuntimeApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteModelUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelUsingDELETECall(modelId, cascade, deleteRuntimeApp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model
     * 
     * @param modelId modelId (required)
     * @param cascade cascade (optional)
     * @param deleteRuntimeApp deleteRuntimeApp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteModelUsingDELETE(Long modelId, Boolean cascade, Boolean deleteRuntimeApp) throws ApiException {
        deleteModelUsingDELETEWithHttpInfo(modelId, cascade, deleteRuntimeApp);
    }

    /**
     * Delete a model
     * 
     * @param modelId modelId (required)
     * @param cascade cascade (optional)
     * @param deleteRuntimeApp deleteRuntimeApp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteModelUsingDELETEWithHttpInfo(Long modelId, Boolean cascade, Boolean deleteRuntimeApp) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelUsingDELETEValidateBeforeCall(modelId, cascade, deleteRuntimeApp, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param cascade cascade (optional)
     * @param deleteRuntimeApp deleteRuntimeApp (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelUsingDELETEAsync(Long modelId, Boolean cascade, Boolean deleteRuntimeApp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelUsingDELETEValidateBeforeCall(modelId, cascade, deleteRuntimeApp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for duplicateModelUsingPOST
     * @param modelId modelId (required)
     * @param modelRepresentation modelRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call duplicateModelUsingPOSTCall(Long modelId, ModelRepresentation modelRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/clone"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call duplicateModelUsingPOSTValidateBeforeCall(Long modelId, ModelRepresentation modelRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling duplicateModelUsingPOST(Async)");
        }
        
        // verify the required parameter 'modelRepresentation' is set
        if (modelRepresentation == null) {
            throw new ApiException("Missing the required parameter 'modelRepresentation' when calling duplicateModelUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = duplicateModelUsingPOSTCall(modelId, modelRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Duplicate an existing model
     * 
     * @param modelId modelId (required)
     * @param modelRepresentation modelRepresentation (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation duplicateModelUsingPOST(Long modelId, ModelRepresentation modelRepresentation) throws ApiException {
        ApiResponse<ModelRepresentation> resp = duplicateModelUsingPOSTWithHttpInfo(modelId, modelRepresentation);
        return resp.getData();
    }

    /**
     * Duplicate an existing model
     * 
     * @param modelId modelId (required)
     * @param modelRepresentation modelRepresentation (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> duplicateModelUsingPOSTWithHttpInfo(Long modelId, ModelRepresentation modelRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = duplicateModelUsingPOSTValidateBeforeCall(modelId, modelRepresentation, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Duplicate an existing model (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param modelRepresentation modelRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call duplicateModelUsingPOSTAsync(Long modelId, ModelRepresentation modelRepresentation, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = duplicateModelUsingPOSTValidateBeforeCall(modelId, modelRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelJSONUsingGET
     * @param modelId modelId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelJSONUsingGETCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/editor/json"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelJSONUsingGETValidateBeforeCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelJSONUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelJSONUsingGETCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get model content
     * 
     * @param modelId modelId (required)
     * @return ObjectNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectNode getModelJSONUsingGET(Long modelId) throws ApiException {
        ApiResponse<ObjectNode> resp = getModelJSONUsingGETWithHttpInfo(modelId);
        return resp.getData();
    }

    /**
     * Get model content
     * 
     * @param modelId modelId (required)
     * @return ApiResponse&lt;ObjectNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectNode> getModelJSONUsingGETWithHttpInfo(Long modelId) throws ApiException {
        com.squareup.okhttp.Call call = getModelJSONUsingGETValidateBeforeCall(modelId, null, null);
        Type localVarReturnType = new TypeToken<ObjectNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get model content (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelJSONUsingGETAsync(Long modelId, final ApiCallback<ObjectNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelJSONUsingGETValidateBeforeCall(modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelThumbnailUsingGET
     * @param modelId modelId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelThumbnailUsingGETCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/thumbnail"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelThumbnailUsingGETValidateBeforeCall(Long modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelThumbnailUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelThumbnailUsingGETCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a model&#39;s thumbnail image
     * 
     * @param modelId modelId (required)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<byte[]> getModelThumbnailUsingGET(Long modelId) throws ApiException {
        ApiResponse<List<byte[]>> resp = getModelThumbnailUsingGETWithHttpInfo(modelId);
        return resp.getData();
    }

    /**
     * Get a model&#39;s thumbnail image
     * 
     * @param modelId modelId (required)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<byte[]>> getModelThumbnailUsingGETWithHttpInfo(Long modelId) throws ApiException {
        com.squareup.okhttp.Call call = getModelThumbnailUsingGETValidateBeforeCall(modelId, null, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a model&#39;s thumbnail image (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelThumbnailUsingGETAsync(Long modelId, final ApiCallback<List<byte[]>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelThumbnailUsingGETValidateBeforeCall(modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelUsingGET
     * @param modelId modelId (required)
     * @param includePermissions includePermissions (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelUsingGETCall(Long modelId, Boolean includePermissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includePermissions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includePermissions", includePermissions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelUsingGETValidateBeforeCall(Long modelId, Boolean includePermissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelUsingGETCall(modelId, includePermissions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a model
     * Models act as containers for process, form, decision table and app definitions
     * @param modelId modelId (required)
     * @param includePermissions includePermissions (optional)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation getModelUsingGET(Long modelId, Boolean includePermissions) throws ApiException {
        ApiResponse<ModelRepresentation> resp = getModelUsingGETWithHttpInfo(modelId, includePermissions);
        return resp.getData();
    }

    /**
     * Get a model
     * Models act as containers for process, form, decision table and app definitions
     * @param modelId modelId (required)
     * @param includePermissions includePermissions (optional)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> getModelUsingGETWithHttpInfo(Long modelId, Boolean includePermissions) throws ApiException {
        com.squareup.okhttp.Call call = getModelUsingGETValidateBeforeCall(modelId, includePermissions, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a model (asynchronously)
     * Models act as containers for process, form, decision table and app definitions
     * @param modelId modelId (required)
     * @param includePermissions includePermissions (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelUsingGETAsync(Long modelId, Boolean includePermissions, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelUsingGETValidateBeforeCall(modelId, includePermissions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelsToIncludeInAppDefinitionUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelsToIncludeInAppDefinitionUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models-for-app-definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelsToIncludeInAppDefinitionUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelsToIncludeInAppDefinitionUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List process definition models shared with the current user
     * 
     * @return ResultListDataRepresentationModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationModelRepresentation getModelsToIncludeInAppDefinitionUsingGET() throws ApiException {
        ApiResponse<ResultListDataRepresentationModelRepresentation> resp = getModelsToIncludeInAppDefinitionUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * List process definition models shared with the current user
     * 
     * @return ApiResponse&lt;ResultListDataRepresentationModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationModelRepresentation> getModelsToIncludeInAppDefinitionUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getModelsToIncludeInAppDefinitionUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List process definition models shared with the current user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelsToIncludeInAppDefinitionUsingGETAsync(final ApiCallback<ResultListDataRepresentationModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelsToIncludeInAppDefinitionUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelsUsingGET
     * @param filter filter (optional)
     * @param sort sort (optional)
     * @param modelType modelType (optional)
     * @param referenceId referenceId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelsUsingGETCall(String filter, String sort, Integer modelType, Long referenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (modelType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modelType", modelType));
        if (referenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("referenceId", referenceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelsUsingGETValidateBeforeCall(String filter, String sort, Integer modelType, Long referenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelsUsingGETCall(filter, sort, modelType, referenceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List models (process, form, decision rule or app)
     * 
     * @param filter filter (optional)
     * @param sort sort (optional)
     * @param modelType modelType (optional)
     * @param referenceId referenceId (optional)
     * @return ResultListDataRepresentationModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationModelRepresentation getModelsUsingGET(String filter, String sort, Integer modelType, Long referenceId) throws ApiException {
        ApiResponse<ResultListDataRepresentationModelRepresentation> resp = getModelsUsingGETWithHttpInfo(filter, sort, modelType, referenceId);
        return resp.getData();
    }

    /**
     * List models (process, form, decision rule or app)
     * 
     * @param filter filter (optional)
     * @param sort sort (optional)
     * @param modelType modelType (optional)
     * @param referenceId referenceId (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationModelRepresentation> getModelsUsingGETWithHttpInfo(String filter, String sort, Integer modelType, Long referenceId) throws ApiException {
        com.squareup.okhttp.Call call = getModelsUsingGETValidateBeforeCall(filter, sort, modelType, referenceId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List models (process, form, decision rule or app) (asynchronously)
     * 
     * @param filter filter (optional)
     * @param sort sort (optional)
     * @param modelType modelType (optional)
     * @param referenceId referenceId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelsUsingGETAsync(String filter, String sort, Integer modelType, Long referenceId, final ApiCallback<ResultListDataRepresentationModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelsUsingGETValidateBeforeCall(filter, sort, modelType, referenceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importNewVersionUsingPOST
     * @param modelId modelId (required)
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importNewVersionUsingPOSTCall(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/newversion"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importNewVersionUsingPOSTValidateBeforeCall(Long modelId, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling importNewVersionUsingPOST(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importNewVersionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = importNewVersionUsingPOSTCall(modelId, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new version of a model
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation importNewVersionUsingPOST(Long modelId, File file) throws ApiException {
        ApiResponse<ModelRepresentation> resp = importNewVersionUsingPOSTWithHttpInfo(modelId, file);
        return resp.getData();
    }

    /**
     * Create a new version of a model
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> importNewVersionUsingPOSTWithHttpInfo(Long modelId, File file) throws ApiException {
        com.squareup.okhttp.Call call = importNewVersionUsingPOSTValidateBeforeCall(modelId, file, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new version of a model (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importNewVersionUsingPOSTAsync(Long modelId, File file, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importNewVersionUsingPOSTValidateBeforeCall(modelId, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importProcessModelUsingPOST
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importProcessModelUsingPOSTCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-models/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importProcessModelUsingPOSTValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importProcessModelUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = importProcessModelUsingPOSTCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import a BPMN 2.0 XML file
     * 
     * @param file file (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation importProcessModelUsingPOST(File file) throws ApiException {
        ApiResponse<ModelRepresentation> resp = importProcessModelUsingPOSTWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Import a BPMN 2.0 XML file
     * 
     * @param file file (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> importProcessModelUsingPOSTWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = importProcessModelUsingPOSTValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import a BPMN 2.0 XML file (asynchronously)
     * 
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importProcessModelUsingPOSTAsync(File file, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importProcessModelUsingPOSTValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveModelUsingPOST
     * @param modelId modelId (required)
     * @param values values (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveModelUsingPOSTCall(Long modelId, Object values, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/editor/json"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveModelUsingPOSTValidateBeforeCall(Long modelId, Object values, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling saveModelUsingPOST(Async)");
        }
        
        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling saveModelUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = saveModelUsingPOSTCall(modelId, values, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update model content
     * 
     * @param modelId modelId (required)
     * @param values values (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation saveModelUsingPOST(Long modelId, Object values) throws ApiException {
        ApiResponse<ModelRepresentation> resp = saveModelUsingPOSTWithHttpInfo(modelId, values);
        return resp.getData();
    }

    /**
     * Update model content
     * 
     * @param modelId modelId (required)
     * @param values values (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> saveModelUsingPOSTWithHttpInfo(Long modelId, Object values) throws ApiException {
        com.squareup.okhttp.Call call = saveModelUsingPOSTValidateBeforeCall(modelId, values, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update model content (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param values values (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveModelUsingPOSTAsync(Long modelId, Object values, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveModelUsingPOSTValidateBeforeCall(modelId, values, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelUsingPUT
     * @param modelId modelId (required)
     * @param updatedModel updatedModel (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateModelUsingPUTCall(Long modelId, ModelRepresentation updatedModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updatedModel;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelUsingPUTValidateBeforeCall(Long modelId, ModelRepresentation updatedModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateModelUsingPUT(Async)");
        }
        
        // verify the required parameter 'updatedModel' is set
        if (updatedModel == null) {
            throw new ApiException("Missing the required parameter 'updatedModel' when calling updateModelUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelUsingPUTCall(modelId, updatedModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model
     * This method allows you to update the metadata of a model. In order to update the content of the model you will need to call the specific endpoint for that model type.
     * @param modelId modelId (required)
     * @param updatedModel updatedModel (required)
     * @return ModelRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelRepresentation updateModelUsingPUT(Long modelId, ModelRepresentation updatedModel) throws ApiException {
        ApiResponse<ModelRepresentation> resp = updateModelUsingPUTWithHttpInfo(modelId, updatedModel);
        return resp.getData();
    }

    /**
     * Update a model
     * This method allows you to update the metadata of a model. In order to update the content of the model you will need to call the specific endpoint for that model type.
     * @param modelId modelId (required)
     * @param updatedModel updatedModel (required)
     * @return ApiResponse&lt;ModelRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelRepresentation> updateModelUsingPUTWithHttpInfo(Long modelId, ModelRepresentation updatedModel) throws ApiException {
        com.squareup.okhttp.Call call = updateModelUsingPUTValidateBeforeCall(modelId, updatedModel, null, null);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model (asynchronously)
     * This method allows you to update the metadata of a model. In order to update the content of the model you will need to call the specific endpoint for that model type.
     * @param modelId modelId (required)
     * @param updatedModel updatedModel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateModelUsingPUTAsync(Long modelId, ModelRepresentation updatedModel, final ApiCallback<ModelRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelUsingPUTValidateBeforeCall(modelId, updatedModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateModelUsingPOST
     * @param modelId modelId (required)
     * @param values values (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateModelUsingPOSTCall(Long modelId, Object values, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/enterprise/models/{modelId}/editor/validate"
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateModelUsingPOSTValidateBeforeCall(Long modelId, Object values, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling validateModelUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = validateModelUsingPOSTCall(modelId, values, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Validate model content
     * 
     * @param modelId modelId (required)
     * @param values values (optional)
     * @return List&lt;ValidationErrorRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ValidationErrorRepresentation> validateModelUsingPOST(Long modelId, Object values) throws ApiException {
        ApiResponse<List<ValidationErrorRepresentation>> resp = validateModelUsingPOSTWithHttpInfo(modelId, values);
        return resp.getData();
    }

    /**
     * Validate model content
     * 
     * @param modelId modelId (required)
     * @param values values (optional)
     * @return ApiResponse&lt;List&lt;ValidationErrorRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ValidationErrorRepresentation>> validateModelUsingPOSTWithHttpInfo(Long modelId, Object values) throws ApiException {
        com.squareup.okhttp.Call call = validateModelUsingPOSTValidateBeforeCall(modelId, values, null, null);
        Type localVarReturnType = new TypeToken<List<ValidationErrorRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate model content (asynchronously)
     * 
     * @param modelId modelId (required)
     * @param values values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateModelUsingPOSTAsync(Long modelId, Object values, final ApiCallback<List<ValidationErrorRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateModelUsingPOSTValidateBeforeCall(modelId, values, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ValidationErrorRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
