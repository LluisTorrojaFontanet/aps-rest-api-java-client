/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoNetworkRepresenation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAlfrescoSiteRepresenation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationAlfrescoCloudApi {
    private ApiClient apiClient;

    public IntegrationAlfrescoCloudApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationAlfrescoCloudApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for confirmAuthorisationUsingGET
     * @param code code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call confirmAuthorisationUsingGETCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/confirm-auth-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code", code));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call confirmAuthorisationUsingGETValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling confirmAuthorisationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = confirmAuthorisationUsingGETCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Alfresco Cloud Authorization
     * Returns Alfresco OAuth HTML Page
     * @param code code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void confirmAuthorisationUsingGET(String code) throws ApiException {
        confirmAuthorisationUsingGETWithHttpInfo(code);
    }

    /**
     * Alfresco Cloud Authorization
     * Returns Alfresco OAuth HTML Page
     * @param code code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> confirmAuthorisationUsingGETWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = confirmAuthorisationUsingGETValidateBeforeCall(code, null, null);
        return apiClient.execute(call);
    }

    /**
     * Alfresco Cloud Authorization (asynchronously)
     * Returns Alfresco OAuth HTML Page
     * @param code code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call confirmAuthorisationUsingGETAsync(String code, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = confirmAuthorisationUsingGETValidateBeforeCall(code, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllNetworksUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllNetworksUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllNetworksUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllNetworksUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Alfresco networks
     * 
     * @return ResultListDataRepresentationAlfrescoNetworkRepresenation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoNetworkRepresenation getAllNetworksUsingGET() throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoNetworkRepresenation> resp = getAllNetworksUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Alfresco networks
     * 
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoNetworkRepresenation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoNetworkRepresenation> getAllNetworksUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllNetworksUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoNetworkRepresenation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Alfresco networks (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllNetworksUsingGETAsync(final ApiCallback<ResultListDataRepresentationAlfrescoNetworkRepresenation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllNetworksUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoNetworkRepresenation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllSitesUsingGET
     * @param networkId networkId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSitesUsingGETCall(String networkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/networks/{networkId}/sites"
            .replaceAll("\\{" + "networkId" + "\\}", apiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSitesUsingGETValidateBeforeCall(String networkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getAllSitesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllSitesUsingGETCall(networkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Alfresco sites
     * Returns ALL Sites
     * @param networkId networkId (required)
     * @return ResultListDataRepresentationAlfrescoSiteRepresenation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoSiteRepresenation getAllSitesUsingGET(String networkId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoSiteRepresenation> resp = getAllSitesUsingGETWithHttpInfo(networkId);
        return resp.getData();
    }

    /**
     * List Alfresco sites
     * Returns ALL Sites
     * @param networkId networkId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoSiteRepresenation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoSiteRepresenation> getAllSitesUsingGETWithHttpInfo(String networkId) throws ApiException {
        com.squareup.okhttp.Call call = getAllSitesUsingGETValidateBeforeCall(networkId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoSiteRepresenation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Alfresco sites (asynchronously)
     * Returns ALL Sites
     * @param networkId networkId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSitesUsingGETAsync(String networkId, final ApiCallback<ResultListDataRepresentationAlfrescoSiteRepresenation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSitesUsingGETValidateBeforeCall(networkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoSiteRepresenation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInFolderPathUsingGET
     * @param networkId networkId (required)
     * @param siteId siteId (optional)
     * @param path path (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderPathUsingGETCall(String networkId, String siteId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/folderpath/{folderPath}/content"
            .replaceAll("\\{" + "networkId" + "\\}", apiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("siteId", siteId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInFolderPathUsingGETValidateBeforeCall(String networkId, String siteId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getContentInFolderPathUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInFolderPathUsingGETCall(networkId, siteId, path, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific folder identified by path
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (optional)
     * @param path path (optional)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInFolderPathUsingGET(String networkId, String siteId, String path) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInFolderPathUsingGETWithHttpInfo(networkId, siteId, path);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific folder identified by path
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (optional)
     * @param path path (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderPathUsingGETWithHttpInfo(String networkId, String siteId, String path) throws ApiException {
        com.squareup.okhttp.Call call = getContentInFolderPathUsingGETValidateBeforeCall(networkId, siteId, path, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific folder identified by path (asynchronously)
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (optional)
     * @param path path (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderPathUsingGETAsync(String networkId, String siteId, String path, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInFolderPathUsingGETValidateBeforeCall(networkId, siteId, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInFolderUsingGET
     * @param networkId networkId (required)
     * @param folderId folderId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderUsingGETCall(String networkId, String folderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/networks/{networkId}/folders/{folderId}/content"
            .replaceAll("\\{" + "networkId" + "\\}", apiClient.escapeString(networkId.toString()))
            .replaceAll("\\{" + "folderId" + "\\}", apiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInFolderUsingGETValidateBeforeCall(String networkId, String folderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getContentInFolderUsingGET(Async)");
        }
        
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getContentInFolderUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInFolderUsingGETCall(networkId, folderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific folder
     * 
     * @param networkId networkId (required)
     * @param folderId folderId (required)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInFolderUsingGET(String networkId, String folderId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInFolderUsingGETWithHttpInfo(networkId, folderId);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific folder
     * 
     * @param networkId networkId (required)
     * @param folderId folderId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInFolderUsingGETWithHttpInfo(String networkId, String folderId) throws ApiException {
        com.squareup.okhttp.Call call = getContentInFolderUsingGETValidateBeforeCall(networkId, folderId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific folder (asynchronously)
     * 
     * @param networkId networkId (required)
     * @param folderId folderId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInFolderUsingGETAsync(String networkId, String folderId, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInFolderUsingGETValidateBeforeCall(networkId, folderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentInSiteUsingGET
     * @param networkId networkId (required)
     * @param siteId siteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentInSiteUsingGETCall(String networkId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/content"
            .replaceAll("\\{" + "networkId" + "\\}", apiClient.escapeString(networkId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentInSiteUsingGETValidateBeforeCall(String networkId, String siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getContentInSiteUsingGET(Async)");
        }
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getContentInSiteUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentInSiteUsingGETCall(networkId, siteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List files and folders inside a specific site
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (required)
     * @return ResultListDataRepresentationAlfrescoContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAlfrescoContentRepresentation getContentInSiteUsingGET(String networkId, String siteId) throws ApiException {
        ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> resp = getContentInSiteUsingGETWithHttpInfo(networkId, siteId);
        return resp.getData();
    }

    /**
     * List files and folders inside a specific site
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (required)
     * @return ApiResponse&lt;ResultListDataRepresentationAlfrescoContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAlfrescoContentRepresentation> getContentInSiteUsingGETWithHttpInfo(String networkId, String siteId) throws ApiException {
        com.squareup.okhttp.Call call = getContentInSiteUsingGETValidateBeforeCall(networkId, siteId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List files and folders inside a specific site (asynchronously)
     * 
     * @param networkId networkId (required)
     * @param siteId siteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentInSiteUsingGETAsync(String networkId, String siteId, final ApiCallback<ResultListDataRepresentationAlfrescoContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentInSiteUsingGETValidateBeforeCall(networkId, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAlfrescoContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
