/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationUserTaskFilterRepresentation;
import org.activiti.engine.remote.client.model.UserFilterOrderRepresentation;
import org.activiti.engine.remote.client.model.UserProcessInstanceFilterRepresentation;
import org.activiti.engine.remote.client.model.UserTaskFilterRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserFiltersApi {
    private ApiClient apiClient;

    public UserFiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserFiltersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUserProcessInstanceFilterUsingPOST
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserProcessInstanceFilterUsingPOSTCall(UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userProcessInstanceFilterRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserProcessInstanceFilterUsingPOSTValidateBeforeCall(UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userProcessInstanceFilterRepresentation' is set
        if (userProcessInstanceFilterRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userProcessInstanceFilterRepresentation' when calling createUserProcessInstanceFilterUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserProcessInstanceFilterUsingPOSTCall(userProcessInstanceFilterRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a process instance filter
     * 
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @return UserProcessInstanceFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProcessInstanceFilterRepresentation createUserProcessInstanceFilterUsingPOST(UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation) throws ApiException {
        ApiResponse<UserProcessInstanceFilterRepresentation> resp = createUserProcessInstanceFilterUsingPOSTWithHttpInfo(userProcessInstanceFilterRepresentation);
        return resp.getData();
    }

    /**
     * Create a process instance filter
     * 
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @return ApiResponse&lt;UserProcessInstanceFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProcessInstanceFilterRepresentation> createUserProcessInstanceFilterUsingPOSTWithHttpInfo(UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createUserProcessInstanceFilterUsingPOSTValidateBeforeCall(userProcessInstanceFilterRepresentation, null, null);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a process instance filter (asynchronously)
     * 
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserProcessInstanceFilterUsingPOSTAsync(UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ApiCallback<UserProcessInstanceFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserProcessInstanceFilterUsingPOSTValidateBeforeCall(userProcessInstanceFilterRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserTaskFilterUsingPOST
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserTaskFilterUsingPOSTCall(UserTaskFilterRepresentation userTaskFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userTaskFilterRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserTaskFilterUsingPOSTValidateBeforeCall(UserTaskFilterRepresentation userTaskFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userTaskFilterRepresentation' is set
        if (userTaskFilterRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userTaskFilterRepresentation' when calling createUserTaskFilterUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserTaskFilterUsingPOSTCall(userTaskFilterRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a task filter
     * 
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @return UserTaskFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserTaskFilterRepresentation createUserTaskFilterUsingPOST(UserTaskFilterRepresentation userTaskFilterRepresentation) throws ApiException {
        ApiResponse<UserTaskFilterRepresentation> resp = createUserTaskFilterUsingPOSTWithHttpInfo(userTaskFilterRepresentation);
        return resp.getData();
    }

    /**
     * Create a task filter
     * 
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @return ApiResponse&lt;UserTaskFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserTaskFilterRepresentation> createUserTaskFilterUsingPOSTWithHttpInfo(UserTaskFilterRepresentation userTaskFilterRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createUserTaskFilterUsingPOSTValidateBeforeCall(userTaskFilterRepresentation, null, null);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a task filter (asynchronously)
     * 
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserTaskFilterUsingPOSTAsync(UserTaskFilterRepresentation userTaskFilterRepresentation, final ApiCallback<UserTaskFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserTaskFilterUsingPOSTValidateBeforeCall(userTaskFilterRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserProcessInstanceFilterUsingDELETE
     * @param userFilterId userFilterId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserProcessInstanceFilterUsingDELETECall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserProcessInstanceFilterUsingDELETEValidateBeforeCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling deleteUserProcessInstanceFilterUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserProcessInstanceFilterUsingDELETECall(userFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserProcessInstanceFilterUsingDELETE(Long userFilterId) throws ApiException {
        deleteUserProcessInstanceFilterUsingDELETEWithHttpInfo(userFilterId);
    }

    /**
     * Delete a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserProcessInstanceFilterUsingDELETEWithHttpInfo(Long userFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserProcessInstanceFilterUsingDELETEValidateBeforeCall(userFilterId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a process instance filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserProcessInstanceFilterUsingDELETEAsync(Long userFilterId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserProcessInstanceFilterUsingDELETEValidateBeforeCall(userFilterId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUserTaskFilterUsingDELETE
     * @param userFilterId userFilterId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserTaskFilterUsingDELETECall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserTaskFilterUsingDELETEValidateBeforeCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling deleteUserTaskFilterUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserTaskFilterUsingDELETECall(userFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserTaskFilterUsingDELETE(Long userFilterId) throws ApiException {
        deleteUserTaskFilterUsingDELETEWithHttpInfo(userFilterId);
    }

    /**
     * Delete a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserTaskFilterUsingDELETEWithHttpInfo(Long userFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserTaskFilterUsingDELETEValidateBeforeCall(userFilterId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a task filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserTaskFilterUsingDELETEAsync(Long userFilterId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserTaskFilterUsingDELETEValidateBeforeCall(userFilterId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserProcessInstanceFilterUsingGET
     * @param userFilterId userFilterId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserProcessInstanceFilterUsingGETCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserProcessInstanceFilterUsingGETValidateBeforeCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling getUserProcessInstanceFilterUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserProcessInstanceFilterUsingGETCall(userFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @return UserProcessInstanceFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProcessInstanceFilterRepresentation getUserProcessInstanceFilterUsingGET(Long userFilterId) throws ApiException {
        ApiResponse<UserProcessInstanceFilterRepresentation> resp = getUserProcessInstanceFilterUsingGETWithHttpInfo(userFilterId);
        return resp.getData();
    }

    /**
     * Get a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @return ApiResponse&lt;UserProcessInstanceFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProcessInstanceFilterRepresentation> getUserProcessInstanceFilterUsingGETWithHttpInfo(Long userFilterId) throws ApiException {
        com.squareup.okhttp.Call call = getUserProcessInstanceFilterUsingGETValidateBeforeCall(userFilterId, null, null);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a process instance filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserProcessInstanceFilterUsingGETAsync(Long userFilterId, final ApiCallback<UserProcessInstanceFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserProcessInstanceFilterUsingGETValidateBeforeCall(userFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserProcessInstanceFiltersUsingGET
     * @param appId appId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserProcessInstanceFiltersUsingGETCall(Long appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appId", appId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserProcessInstanceFiltersUsingGETValidateBeforeCall(Long appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUserProcessInstanceFiltersUsingGETCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List process instance filters
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @return ResultListDataRepresentationUserProcessInstanceFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationUserProcessInstanceFilterRepresentation getUserProcessInstanceFiltersUsingGET(Long appId) throws ApiException {
        ApiResponse<ResultListDataRepresentationUserProcessInstanceFilterRepresentation> resp = getUserProcessInstanceFiltersUsingGETWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * List process instance filters
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationUserProcessInstanceFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationUserProcessInstanceFilterRepresentation> getUserProcessInstanceFiltersUsingGETWithHttpInfo(Long appId) throws ApiException {
        com.squareup.okhttp.Call call = getUserProcessInstanceFiltersUsingGETValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List process instance filters (asynchronously)
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserProcessInstanceFiltersUsingGETAsync(Long appId, final ApiCallback<ResultListDataRepresentationUserProcessInstanceFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserProcessInstanceFiltersUsingGETValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserTaskFilterUsingGET
     * @param userFilterId userFilterId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserTaskFilterUsingGETCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserTaskFilterUsingGETValidateBeforeCall(Long userFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling getUserTaskFilterUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserTaskFilterUsingGETCall(userFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @return UserTaskFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserTaskFilterRepresentation getUserTaskFilterUsingGET(Long userFilterId) throws ApiException {
        ApiResponse<UserTaskFilterRepresentation> resp = getUserTaskFilterUsingGETWithHttpInfo(userFilterId);
        return resp.getData();
    }

    /**
     * Get a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @return ApiResponse&lt;UserTaskFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserTaskFilterRepresentation> getUserTaskFilterUsingGETWithHttpInfo(Long userFilterId) throws ApiException {
        com.squareup.okhttp.Call call = getUserTaskFilterUsingGETValidateBeforeCall(userFilterId, null, null);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a task filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserTaskFilterUsingGETAsync(Long userFilterId, final ApiCallback<UserTaskFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserTaskFilterUsingGETValidateBeforeCall(userFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserTaskFiltersUsingGET
     * @param appId appId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserTaskFiltersUsingGETCall(Long appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appId", appId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserTaskFiltersUsingGETValidateBeforeCall(Long appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUserTaskFiltersUsingGETCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List task filters
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @return ResultListDataRepresentationUserTaskFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationUserTaskFilterRepresentation getUserTaskFiltersUsingGET(Long appId) throws ApiException {
        ApiResponse<ResultListDataRepresentationUserTaskFilterRepresentation> resp = getUserTaskFiltersUsingGETWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * List task filters
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationUserTaskFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationUserTaskFilterRepresentation> getUserTaskFiltersUsingGETWithHttpInfo(Long appId) throws ApiException {
        com.squareup.okhttp.Call call = getUserTaskFiltersUsingGETValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationUserTaskFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List task filters (asynchronously)
     * Returns filters for the current user, optionally filtered by *appId*.
     * @param appId appId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserTaskFiltersUsingGETAsync(Long appId, final ApiCallback<ResultListDataRepresentationUserTaskFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserTaskFiltersUsingGETValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationUserTaskFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderUserProcessInstanceFiltersUsingPUT
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderUserProcessInstanceFiltersUsingPUTCall(UserFilterOrderRepresentation filterOrderRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filterOrderRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderUserProcessInstanceFiltersUsingPUTValidateBeforeCall(UserFilterOrderRepresentation filterOrderRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filterOrderRepresentation' is set
        if (filterOrderRepresentation == null) {
            throw new ApiException("Missing the required parameter 'filterOrderRepresentation' when calling orderUserProcessInstanceFiltersUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = orderUserProcessInstanceFiltersUsingPUTCall(filterOrderRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Re-order the list of user process instance filters
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderUserProcessInstanceFiltersUsingPUT(UserFilterOrderRepresentation filterOrderRepresentation) throws ApiException {
        orderUserProcessInstanceFiltersUsingPUTWithHttpInfo(filterOrderRepresentation);
    }

    /**
     * Re-order the list of user process instance filters
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderUserProcessInstanceFiltersUsingPUTWithHttpInfo(UserFilterOrderRepresentation filterOrderRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = orderUserProcessInstanceFiltersUsingPUTValidateBeforeCall(filterOrderRepresentation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Re-order the list of user process instance filters (asynchronously)
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderUserProcessInstanceFiltersUsingPUTAsync(UserFilterOrderRepresentation filterOrderRepresentation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderUserProcessInstanceFiltersUsingPUTValidateBeforeCall(filterOrderRepresentation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for orderUserTaskFiltersUsingPUT
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderUserTaskFiltersUsingPUTCall(UserFilterOrderRepresentation filterOrderRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filterOrderRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderUserTaskFiltersUsingPUTValidateBeforeCall(UserFilterOrderRepresentation filterOrderRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filterOrderRepresentation' is set
        if (filterOrderRepresentation == null) {
            throw new ApiException("Missing the required parameter 'filterOrderRepresentation' when calling orderUserTaskFiltersUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = orderUserTaskFiltersUsingPUTCall(filterOrderRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Re-order the list of user task filters
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderUserTaskFiltersUsingPUT(UserFilterOrderRepresentation filterOrderRepresentation) throws ApiException {
        orderUserTaskFiltersUsingPUTWithHttpInfo(filterOrderRepresentation);
    }

    /**
     * Re-order the list of user task filters
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderUserTaskFiltersUsingPUTWithHttpInfo(UserFilterOrderRepresentation filterOrderRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = orderUserTaskFiltersUsingPUTValidateBeforeCall(filterOrderRepresentation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Re-order the list of user task filters (asynchronously)
     * 
     * @param filterOrderRepresentation filterOrderRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderUserTaskFiltersUsingPUTAsync(UserFilterOrderRepresentation filterOrderRepresentation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderUserTaskFiltersUsingPUTValidateBeforeCall(filterOrderRepresentation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateUserProcessInstanceFilterUsingPUT
     * @param userFilterId userFilterId (required)
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserProcessInstanceFilterUsingPUTCall(Long userFilterId, UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userProcessInstanceFilterRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/processes/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserProcessInstanceFilterUsingPUTValidateBeforeCall(Long userFilterId, UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling updateUserProcessInstanceFilterUsingPUT(Async)");
        }
        
        // verify the required parameter 'userProcessInstanceFilterRepresentation' is set
        if (userProcessInstanceFilterRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userProcessInstanceFilterRepresentation' when calling updateUserProcessInstanceFilterUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserProcessInstanceFilterUsingPUTCall(userFilterId, userProcessInstanceFilterRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @return UserProcessInstanceFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProcessInstanceFilterRepresentation updateUserProcessInstanceFilterUsingPUT(Long userFilterId, UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation) throws ApiException {
        ApiResponse<UserProcessInstanceFilterRepresentation> resp = updateUserProcessInstanceFilterUsingPUTWithHttpInfo(userFilterId, userProcessInstanceFilterRepresentation);
        return resp.getData();
    }

    /**
     * Update a process instance filter
     * 
     * @param userFilterId userFilterId (required)
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @return ApiResponse&lt;UserProcessInstanceFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProcessInstanceFilterRepresentation> updateUserProcessInstanceFilterUsingPUTWithHttpInfo(Long userFilterId, UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = updateUserProcessInstanceFilterUsingPUTValidateBeforeCall(userFilterId, userProcessInstanceFilterRepresentation, null, null);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a process instance filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param userProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserProcessInstanceFilterUsingPUTAsync(Long userFilterId, UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation, final ApiCallback<UserProcessInstanceFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserProcessInstanceFilterUsingPUTValidateBeforeCall(userFilterId, userProcessInstanceFilterRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProcessInstanceFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserTaskFilterUsingPUT
     * @param userFilterId userFilterId (required)
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserTaskFilterUsingPUTCall(Long userFilterId, UserTaskFilterRepresentation userTaskFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userTaskFilterRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/filters/tasks/{userFilterId}"
            .replaceAll("\\{" + "userFilterId" + "\\}", apiClient.escapeString(userFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserTaskFilterUsingPUTValidateBeforeCall(Long userFilterId, UserTaskFilterRepresentation userTaskFilterRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userFilterId' is set
        if (userFilterId == null) {
            throw new ApiException("Missing the required parameter 'userFilterId' when calling updateUserTaskFilterUsingPUT(Async)");
        }
        
        // verify the required parameter 'userTaskFilterRepresentation' is set
        if (userTaskFilterRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userTaskFilterRepresentation' when calling updateUserTaskFilterUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserTaskFilterUsingPUTCall(userFilterId, userTaskFilterRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @return UserTaskFilterRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserTaskFilterRepresentation updateUserTaskFilterUsingPUT(Long userFilterId, UserTaskFilterRepresentation userTaskFilterRepresentation) throws ApiException {
        ApiResponse<UserTaskFilterRepresentation> resp = updateUserTaskFilterUsingPUTWithHttpInfo(userFilterId, userTaskFilterRepresentation);
        return resp.getData();
    }

    /**
     * Update a task filter
     * 
     * @param userFilterId userFilterId (required)
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @return ApiResponse&lt;UserTaskFilterRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserTaskFilterRepresentation> updateUserTaskFilterUsingPUTWithHttpInfo(Long userFilterId, UserTaskFilterRepresentation userTaskFilterRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = updateUserTaskFilterUsingPUTValidateBeforeCall(userFilterId, userTaskFilterRepresentation, null, null);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a task filter (asynchronously)
     * 
     * @param userFilterId userFilterId (required)
     * @param userTaskFilterRepresentation userTaskFilterRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserTaskFilterUsingPUTAsync(Long userFilterId, UserTaskFilterRepresentation userTaskFilterRepresentation, final ApiCallback<UserTaskFilterRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserTaskFilterUsingPUTValidateBeforeCall(userFilterId, userTaskFilterRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserTaskFilterRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
