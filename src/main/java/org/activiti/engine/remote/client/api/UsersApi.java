/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.ResetPasswordRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationLightUserRepresentation;
import org.activiti.engine.remote.client.model.UserActionRepresentation;
import org.activiti.engine.remote.client.model.UserRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient apiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for executeActionUsingPOST
     * @param userId userId (required)
     * @param actionRequest actionRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeActionUsingPOSTCall(Long userId, UserActionRepresentation actionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = actionRequest;

        // create path and map variables
        String localVarPath = "/enterprise/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeActionUsingPOSTValidateBeforeCall(Long userId, UserActionRepresentation actionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling executeActionUsingPOST(Async)");
        }
        
        // verify the required parameter 'actionRequest' is set
        if (actionRequest == null) {
            throw new ApiException("Missing the required parameter 'actionRequest' when calling executeActionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = executeActionUsingPOSTCall(userId, actionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute an action for a specific user
     * Typical action is updating/reset password
     * @param userId userId (required)
     * @param actionRequest actionRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void executeActionUsingPOST(Long userId, UserActionRepresentation actionRequest) throws ApiException {
        executeActionUsingPOSTWithHttpInfo(userId, actionRequest);
    }

    /**
     * Execute an action for a specific user
     * Typical action is updating/reset password
     * @param userId userId (required)
     * @param actionRequest actionRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> executeActionUsingPOSTWithHttpInfo(Long userId, UserActionRepresentation actionRequest) throws ApiException {
        com.squareup.okhttp.Call call = executeActionUsingPOSTValidateBeforeCall(userId, actionRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Execute an action for a specific user (asynchronously)
     * Typical action is updating/reset password
     * @param userId userId (required)
     * @param actionRequest actionRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeActionUsingPOSTAsync(Long userId, UserActionRepresentation actionRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeActionUsingPOSTValidateBeforeCall(userId, actionRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getProfilePictureUsingGET1
     * @param userId userId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfilePictureUsingGET1Call(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/users/{userId}/picture"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfilePictureUsingGET1ValidateBeforeCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getProfilePictureUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getProfilePictureUsingGET1Call(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stream user profile picture
     * 
     * @param userId userId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getProfilePictureUsingGET1(Long userId) throws ApiException {
        getProfilePictureUsingGET1WithHttpInfo(userId);
    }

    /**
     * Stream user profile picture
     * 
     * @param userId userId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getProfilePictureUsingGET1WithHttpInfo(Long userId) throws ApiException {
        com.squareup.okhttp.Call call = getProfilePictureUsingGET1ValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stream user profile picture (asynchronously)
     * 
     * @param userId userId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfilePictureUsingGET1Async(Long userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfilePictureUsingGET1ValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserUsingGET1
     * @param userId userId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserUsingGET1Call(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserUsingGET1ValidateBeforeCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserUsingGET1Call(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user
     * 
     * @param userId userId (required)
     * @return UserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserRepresentation getUserUsingGET1(Long userId) throws ApiException {
        ApiResponse<UserRepresentation> resp = getUserUsingGET1WithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get a user
     * 
     * @param userId userId (required)
     * @return ApiResponse&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserRepresentation> getUserUsingGET1WithHttpInfo(Long userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserUsingGET1ValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user (asynchronously)
     * 
     * @param userId userId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserUsingGET1Async(Long userId, final ApiCallback<UserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserUsingGET1ValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersUsingGET1
     * @param filter filter (optional)
     * @param email email (optional)
     * @param externalId externalId (optional)
     * @param externalIdCaseInsensitive externalIdCaseInsensitive (optional)
     * @param excludeTaskId excludeTaskId (optional)
     * @param excludeProcessId excludeProcessId (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGET1Call(String filter, String email, String externalId, String externalIdCaseInsensitive, String excludeTaskId, String excludeProcessId, Long groupId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (externalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalId", externalId));
        if (externalIdCaseInsensitive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalIdCaseInsensitive", externalIdCaseInsensitive));
        if (excludeTaskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeTaskId", excludeTaskId));
        if (excludeProcessId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeProcessId", excludeProcessId));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersUsingGET1ValidateBeforeCall(String filter, String email, String externalId, String externalIdCaseInsensitive, String excludeTaskId, String excludeProcessId, Long groupId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUsersUsingGET1Call(filter, email, externalId, externalIdCaseInsensitive, excludeTaskId, excludeProcessId, groupId, tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query users
     * A common use case is that a user wants to select another user (eg. when assigning a task) or group.
     * @param filter filter (optional)
     * @param email email (optional)
     * @param externalId externalId (optional)
     * @param externalIdCaseInsensitive externalIdCaseInsensitive (optional)
     * @param excludeTaskId excludeTaskId (optional)
     * @param excludeProcessId excludeProcessId (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @return ResultListDataRepresentationLightUserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationLightUserRepresentation getUsersUsingGET1(String filter, String email, String externalId, String externalIdCaseInsensitive, String excludeTaskId, String excludeProcessId, Long groupId, Long tenantId) throws ApiException {
        ApiResponse<ResultListDataRepresentationLightUserRepresentation> resp = getUsersUsingGET1WithHttpInfo(filter, email, externalId, externalIdCaseInsensitive, excludeTaskId, excludeProcessId, groupId, tenantId);
        return resp.getData();
    }

    /**
     * Query users
     * A common use case is that a user wants to select another user (eg. when assigning a task) or group.
     * @param filter filter (optional)
     * @param email email (optional)
     * @param externalId externalId (optional)
     * @param externalIdCaseInsensitive externalIdCaseInsensitive (optional)
     * @param excludeTaskId excludeTaskId (optional)
     * @param excludeProcessId excludeProcessId (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationLightUserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationLightUserRepresentation> getUsersUsingGET1WithHttpInfo(String filter, String email, String externalId, String externalIdCaseInsensitive, String excludeTaskId, String excludeProcessId, Long groupId, Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getUsersUsingGET1ValidateBeforeCall(filter, email, externalId, externalIdCaseInsensitive, excludeTaskId, excludeProcessId, groupId, tenantId, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationLightUserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query users (asynchronously)
     * A common use case is that a user wants to select another user (eg. when assigning a task) or group.
     * @param filter filter (optional)
     * @param email email (optional)
     * @param externalId externalId (optional)
     * @param externalIdCaseInsensitive externalIdCaseInsensitive (optional)
     * @param excludeTaskId excludeTaskId (optional)
     * @param excludeProcessId excludeProcessId (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGET1Async(String filter, String email, String externalId, String externalIdCaseInsensitive, String excludeTaskId, String excludeProcessId, Long groupId, Long tenantId, final ApiCallback<ResultListDataRepresentationLightUserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersUsingGET1ValidateBeforeCall(filter, email, externalId, externalIdCaseInsensitive, excludeTaskId, excludeProcessId, groupId, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationLightUserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestPasswordResetUsingPOST
     * @param resetPassword resetPassword (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestPasswordResetUsingPOSTCall(ResetPasswordRepresentation resetPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resetPassword;

        // create path and map variables
        String localVarPath = "/enterprise/idm/passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestPasswordResetUsingPOSTValidateBeforeCall(ResetPasswordRepresentation resetPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resetPassword' is set
        if (resetPassword == null) {
            throw new ApiException("Missing the required parameter 'resetPassword' when calling requestPasswordResetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = requestPasswordResetUsingPOSTCall(resetPassword, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request a password reset
     * 
     * @param resetPassword resetPassword (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestPasswordResetUsingPOST(ResetPasswordRepresentation resetPassword) throws ApiException {
        requestPasswordResetUsingPOSTWithHttpInfo(resetPassword);
    }

    /**
     * Request a password reset
     * 
     * @param resetPassword resetPassword (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestPasswordResetUsingPOSTWithHttpInfo(ResetPasswordRepresentation resetPassword) throws ApiException {
        com.squareup.okhttp.Call call = requestPasswordResetUsingPOSTValidateBeforeCall(resetPassword, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request a password reset (asynchronously)
     * 
     * @param resetPassword resetPassword (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestPasswordResetUsingPOSTAsync(ResetPasswordRepresentation resetPassword, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestPasswordResetUsingPOSTValidateBeforeCall(resetPassword, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateUserUsingPUT
     * @param userId userId (required)
     * @param userRequest userRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserUsingPUTCall(Long userId, UserRepresentation userRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userRequest;

        // create path and map variables
        String localVarPath = "/enterprise/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserUsingPUTValidateBeforeCall(Long userId, UserRepresentation userRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserUsingPUT(Async)");
        }
        
        // verify the required parameter 'userRequest' is set
        if (userRequest == null) {
            throw new ApiException("Missing the required parameter 'userRequest' when calling updateUserUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserUsingPUTCall(userId, userRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a user
     * 
     * @param userId userId (required)
     * @param userRequest userRequest (required)
     * @return UserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserRepresentation updateUserUsingPUT(Long userId, UserRepresentation userRequest) throws ApiException {
        ApiResponse<UserRepresentation> resp = updateUserUsingPUTWithHttpInfo(userId, userRequest);
        return resp.getData();
    }

    /**
     * Update a user
     * 
     * @param userId userId (required)
     * @param userRequest userRequest (required)
     * @return ApiResponse&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserRepresentation> updateUserUsingPUTWithHttpInfo(Long userId, UserRepresentation userRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateUserUsingPUTValidateBeforeCall(userId, userRequest, null, null);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param userId userId (required)
     * @param userRequest userRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserUsingPUTAsync(Long userId, UserRepresentation userRequest, final ApiCallback<UserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserUsingPUTValidateBeforeCall(userId, userRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
