/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.activiti.engine.remote.client.model.RelatedContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRelatedContentRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient apiClient;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRelatedContentOnProcessInstanceUsingPOST
     * @param processInstanceId processInstanceId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOSTCall(String processInstanceId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = relatedContent;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/content"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOSTValidateBeforeCall(String processInstanceId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling createRelatedContentOnProcessInstanceUsingPOST(Async)");
        }
        
        // verify the required parameter 'relatedContent' is set
        if (relatedContent == null) {
            throw new ApiException("Missing the required parameter 'relatedContent' when calling createRelatedContentOnProcessInstanceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOSTCall(processInstanceId, relatedContent, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach existing content to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createRelatedContentOnProcessInstanceUsingPOST(String processInstanceId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createRelatedContentOnProcessInstanceUsingPOSTWithHttpInfo(processInstanceId, relatedContent, isRelatedContent);
        return resp.getData();
    }

    /**
     * Attach existing content to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOSTWithHttpInfo(String processInstanceId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOSTValidateBeforeCall(processInstanceId, relatedContent, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach existing content to a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOSTAsync(String processInstanceId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOSTValidateBeforeCall(processInstanceId, relatedContent, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRelatedContentOnProcessInstanceUsingPOST1
     * @param processInstanceId processInstanceId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOST1Call(String processInstanceId, File file, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/raw-content"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOST1ValidateBeforeCall(String processInstanceId, File file, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling createRelatedContentOnProcessInstanceUsingPOST1(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createRelatedContentOnProcessInstanceUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOST1Call(processInstanceId, file, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload content and attach to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createRelatedContentOnProcessInstanceUsingPOST1(String processInstanceId, File file, Boolean isRelatedContent) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createRelatedContentOnProcessInstanceUsingPOST1WithHttpInfo(processInstanceId, file, isRelatedContent);
        return resp.getData();
    }

    /**
     * Upload content and attach to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createRelatedContentOnProcessInstanceUsingPOST1WithHttpInfo(String processInstanceId, File file, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOST1ValidateBeforeCall(processInstanceId, file, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload content and attach to a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnProcessInstanceUsingPOST1Async(String processInstanceId, File file, Boolean isRelatedContent, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRelatedContentOnProcessInstanceUsingPOST1ValidateBeforeCall(processInstanceId, file, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRelatedContentOnTaskUsingPOST
     * @param taskId taskId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOSTCall(String taskId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = relatedContent;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/content"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOSTValidateBeforeCall(String taskId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createRelatedContentOnTaskUsingPOST(Async)");
        }
        
        // verify the required parameter 'relatedContent' is set
        if (relatedContent == null) {
            throw new ApiException("Missing the required parameter 'relatedContent' when calling createRelatedContentOnTaskUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOSTCall(taskId, relatedContent, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attach existing content to a task
     * 
     * @param taskId taskId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createRelatedContentOnTaskUsingPOST(String taskId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createRelatedContentOnTaskUsingPOSTWithHttpInfo(taskId, relatedContent, isRelatedContent);
        return resp.getData();
    }

    /**
     * Attach existing content to a task
     * 
     * @param taskId taskId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOSTWithHttpInfo(String taskId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOSTValidateBeforeCall(taskId, relatedContent, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach existing content to a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param relatedContent relatedContent (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOSTAsync(String taskId, RelatedContentRepresentation relatedContent, Boolean isRelatedContent, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOSTValidateBeforeCall(taskId, relatedContent, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRelatedContentOnTaskUsingPOST1
     * @param taskId taskId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOST1Call(String taskId, File file, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/raw-content"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOST1ValidateBeforeCall(String taskId, File file, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createRelatedContentOnTaskUsingPOST1(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createRelatedContentOnTaskUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOST1Call(taskId, file, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload content and attach to a task
     * 
     * @param taskId taskId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createRelatedContentOnTaskUsingPOST1(String taskId, File file, Boolean isRelatedContent) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createRelatedContentOnTaskUsingPOST1WithHttpInfo(taskId, file, isRelatedContent);
        return resp.getData();
    }

    /**
     * Upload content and attach to a task
     * 
     * @param taskId taskId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createRelatedContentOnTaskUsingPOST1WithHttpInfo(String taskId, File file, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOST1ValidateBeforeCall(taskId, file, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload content and attach to a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param file file (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRelatedContentOnTaskUsingPOST1Async(String taskId, File file, Boolean isRelatedContent, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRelatedContentOnTaskUsingPOST1ValidateBeforeCall(taskId, file, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTemporaryRawRelatedContentUsingPOST
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTemporaryRawRelatedContentUsingPOSTCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/content/raw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTemporaryRawRelatedContentUsingPOSTValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling createTemporaryRawRelatedContentUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTemporaryRawRelatedContentUsingPOSTCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload content and create a local representation
     * 
     * @param file file (required)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createTemporaryRawRelatedContentUsingPOST(File file) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createTemporaryRawRelatedContentUsingPOSTWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload content and create a local representation
     * 
     * @param file file (required)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createTemporaryRawRelatedContentUsingPOSTWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = createTemporaryRawRelatedContentUsingPOSTValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload content and create a local representation (asynchronously)
     * 
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTemporaryRawRelatedContentUsingPOSTAsync(File file, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTemporaryRawRelatedContentUsingPOSTValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTemporaryRelatedContentUsingPOST
     * @param relatedContent relatedContent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTemporaryRelatedContentUsingPOSTCall(RelatedContentRepresentation relatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = relatedContent;

        // create path and map variables
        String localVarPath = "/enterprise/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTemporaryRelatedContentUsingPOSTValidateBeforeCall(RelatedContentRepresentation relatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'relatedContent' is set
        if (relatedContent == null) {
            throw new ApiException("Missing the required parameter 'relatedContent' when calling createTemporaryRelatedContentUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTemporaryRelatedContentUsingPOSTCall(relatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a local representation of content from a remote repository
     * 
     * @param relatedContent relatedContent (required)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation createTemporaryRelatedContentUsingPOST(RelatedContentRepresentation relatedContent) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = createTemporaryRelatedContentUsingPOSTWithHttpInfo(relatedContent);
        return resp.getData();
    }

    /**
     * Create a local representation of content from a remote repository
     * 
     * @param relatedContent relatedContent (required)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> createTemporaryRelatedContentUsingPOSTWithHttpInfo(RelatedContentRepresentation relatedContent) throws ApiException {
        com.squareup.okhttp.Call call = createTemporaryRelatedContentUsingPOSTValidateBeforeCall(relatedContent, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a local representation of content from a remote repository (asynchronously)
     * 
     * @param relatedContent relatedContent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTemporaryRelatedContentUsingPOSTAsync(RelatedContentRepresentation relatedContent, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTemporaryRelatedContentUsingPOSTValidateBeforeCall(relatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContentUsingDELETE
     * @param contentId contentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContentUsingDELETECall(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/content/{contentId}"
            .replaceAll("\\{" + "contentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContentUsingDELETEValidateBeforeCall(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling deleteContentUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContentUsingDELETECall(contentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a local content representation
     * 
     * @param contentId contentId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContentUsingDELETE(Long contentId) throws ApiException {
        deleteContentUsingDELETEWithHttpInfo(contentId);
    }

    /**
     * Remove a local content representation
     * 
     * @param contentId contentId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContentUsingDELETEWithHttpInfo(Long contentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContentUsingDELETEValidateBeforeCall(contentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a local content representation (asynchronously)
     * 
     * @param contentId contentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContentUsingDELETEAsync(Long contentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContentUsingDELETEValidateBeforeCall(contentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getContentUsingGET
     * @param contentId contentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentUsingGETCall(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/content/{contentId}"
            .replaceAll("\\{" + "contentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentUsingGETValidateBeforeCall(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling getContentUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getContentUsingGETCall(contentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a local content representation
     * 
     * @param contentId contentId (required)
     * @return RelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelatedContentRepresentation getContentUsingGET(Long contentId) throws ApiException {
        ApiResponse<RelatedContentRepresentation> resp = getContentUsingGETWithHttpInfo(contentId);
        return resp.getData();
    }

    /**
     * Get a local content representation
     * 
     * @param contentId contentId (required)
     * @return ApiResponse&lt;RelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelatedContentRepresentation> getContentUsingGETWithHttpInfo(Long contentId) throws ApiException {
        com.squareup.okhttp.Call call = getContentUsingGETValidateBeforeCall(contentId, null, null);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a local content representation (asynchronously)
     * 
     * @param contentId contentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentUsingGETAsync(Long contentId, final ApiCallback<RelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentUsingGETValidateBeforeCall(contentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRawContentUsingGET
     * @param contentId contentId (required)
     * @param renditionType renditionType (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRawContentUsingGETCall(Long contentId, String renditionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/content/{contentId}/rendition/{renditionType}"
            .replaceAll("\\{" + "contentId" + "\\}", apiClient.escapeString(contentId.toString()))
            .replaceAll("\\{" + "renditionType" + "\\}", apiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRawContentUsingGETValidateBeforeCall(Long contentId, String renditionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling getRawContentUsingGET(Async)");
        }
        
        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling getRawContentUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getRawContentUsingGETCall(contentId, renditionType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stream content rendition
     * 
     * @param contentId contentId (required)
     * @param renditionType renditionType (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getRawContentUsingGET(Long contentId, String renditionType) throws ApiException {
        getRawContentUsingGETWithHttpInfo(contentId, renditionType);
    }

    /**
     * Stream content rendition
     * 
     * @param contentId contentId (required)
     * @param renditionType renditionType (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getRawContentUsingGETWithHttpInfo(Long contentId, String renditionType) throws ApiException {
        com.squareup.okhttp.Call call = getRawContentUsingGETValidateBeforeCall(contentId, renditionType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stream content rendition (asynchronously)
     * 
     * @param contentId contentId (required)
     * @param renditionType renditionType (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRawContentUsingGETAsync(Long contentId, String renditionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRawContentUsingGETValidateBeforeCall(contentId, renditionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRawContentUsingGET1
     * @param contentId contentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRawContentUsingGET1Call(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/content/{contentId}/raw"
            .replaceAll("\\{" + "contentId" + "\\}", apiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRawContentUsingGET1ValidateBeforeCall(Long contentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling getRawContentUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getRawContentUsingGET1Call(contentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stream content from a local content representation
     * 
     * @param contentId contentId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getRawContentUsingGET1(Long contentId) throws ApiException {
        getRawContentUsingGET1WithHttpInfo(contentId);
    }

    /**
     * Stream content from a local content representation
     * 
     * @param contentId contentId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getRawContentUsingGET1WithHttpInfo(Long contentId) throws ApiException {
        com.squareup.okhttp.Call call = getRawContentUsingGET1ValidateBeforeCall(contentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stream content from a local content representation (asynchronously)
     * 
     * @param contentId contentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRawContentUsingGET1Async(Long contentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRawContentUsingGET1ValidateBeforeCall(contentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRelatedContentForProcessInstanceUsingGET
     * @param processInstanceId processInstanceId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRelatedContentForProcessInstanceUsingGETCall(String processInstanceId, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/process-instances/{processInstanceId}/content"
            .replaceAll("\\{" + "processInstanceId" + "\\}", apiClient.escapeString(processInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelatedContentForProcessInstanceUsingGETValidateBeforeCall(String processInstanceId, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling getRelatedContentForProcessInstanceUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getRelatedContentForProcessInstanceUsingGETCall(processInstanceId, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List content attached to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ResultListDataRepresentationRelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationRelatedContentRepresentation getRelatedContentForProcessInstanceUsingGET(String processInstanceId, Boolean isRelatedContent) throws ApiException {
        ApiResponse<ResultListDataRepresentationRelatedContentRepresentation> resp = getRelatedContentForProcessInstanceUsingGETWithHttpInfo(processInstanceId, isRelatedContent);
        return resp.getData();
    }

    /**
     * List content attached to a process instance
     * 
     * @param processInstanceId processInstanceId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationRelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForProcessInstanceUsingGETWithHttpInfo(String processInstanceId, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = getRelatedContentForProcessInstanceUsingGETValidateBeforeCall(processInstanceId, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List content attached to a process instance (asynchronously)
     * 
     * @param processInstanceId processInstanceId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelatedContentForProcessInstanceUsingGETAsync(String processInstanceId, Boolean isRelatedContent, final ApiCallback<ResultListDataRepresentationRelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelatedContentForProcessInstanceUsingGETValidateBeforeCall(processInstanceId, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRelatedContentForTaskUsingGET
     * @param taskId taskId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRelatedContentForTaskUsingGETCall(String taskId, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/tasks/{taskId}/content"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isRelatedContent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isRelatedContent", isRelatedContent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelatedContentForTaskUsingGETValidateBeforeCall(String taskId, Boolean isRelatedContent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getRelatedContentForTaskUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getRelatedContentForTaskUsingGETCall(taskId, isRelatedContent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List content attached to a task
     * 
     * @param taskId taskId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ResultListDataRepresentationRelatedContentRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationRelatedContentRepresentation getRelatedContentForTaskUsingGET(String taskId, Boolean isRelatedContent) throws ApiException {
        ApiResponse<ResultListDataRepresentationRelatedContentRepresentation> resp = getRelatedContentForTaskUsingGETWithHttpInfo(taskId, isRelatedContent);
        return resp.getData();
    }

    /**
     * List content attached to a task
     * 
     * @param taskId taskId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationRelatedContentRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationRelatedContentRepresentation> getRelatedContentForTaskUsingGETWithHttpInfo(String taskId, Boolean isRelatedContent) throws ApiException {
        com.squareup.okhttp.Call call = getRelatedContentForTaskUsingGETValidateBeforeCall(taskId, isRelatedContent, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRelatedContentRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List content attached to a task (asynchronously)
     * 
     * @param taskId taskId (required)
     * @param isRelatedContent isRelatedContent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelatedContentForTaskUsingGETAsync(String taskId, Boolean isRelatedContent, final ApiCallback<ResultListDataRepresentationRelatedContentRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelatedContentForTaskUsingGETValidateBeforeCall(taskId, isRelatedContent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRelatedContentRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
