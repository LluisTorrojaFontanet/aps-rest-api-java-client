/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.CreateEndpointBasicAuthRepresentation;
import org.activiti.engine.remote.client.model.EndpointBasicAuthRepresentation;
import org.activiti.engine.remote.client.model.EndpointConfigurationRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminEndpointsApi {
    private ApiClient apiClient;

    public AdminEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminEndpointsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBasicAuthConfigurationUsingPOST
     * @param createRepresentation createRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBasicAuthConfigurationUsingPOSTCall(CreateEndpointBasicAuthRepresentation createRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/basic-auths";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBasicAuthConfigurationUsingPOSTValidateBeforeCall(CreateEndpointBasicAuthRepresentation createRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createRepresentation' is set
        if (createRepresentation == null) {
            throw new ApiException("Missing the required parameter 'createRepresentation' when calling createBasicAuthConfigurationUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createBasicAuthConfigurationUsingPOSTCall(createRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an endpoint authorization
     * 
     * @param createRepresentation createRepresentation (required)
     * @return EndpointBasicAuthRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointBasicAuthRepresentation createBasicAuthConfigurationUsingPOST(CreateEndpointBasicAuthRepresentation createRepresentation) throws ApiException {
        ApiResponse<EndpointBasicAuthRepresentation> resp = createBasicAuthConfigurationUsingPOSTWithHttpInfo(createRepresentation);
        return resp.getData();
    }

    /**
     * Add an endpoint authorization
     * 
     * @param createRepresentation createRepresentation (required)
     * @return ApiResponse&lt;EndpointBasicAuthRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointBasicAuthRepresentation> createBasicAuthConfigurationUsingPOSTWithHttpInfo(CreateEndpointBasicAuthRepresentation createRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createBasicAuthConfigurationUsingPOSTValidateBeforeCall(createRepresentation, null, null);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an endpoint authorization (asynchronously)
     * 
     * @param createRepresentation createRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBasicAuthConfigurationUsingPOSTAsync(CreateEndpointBasicAuthRepresentation createRepresentation, final ApiCallback<EndpointBasicAuthRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBasicAuthConfigurationUsingPOSTValidateBeforeCall(createRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEndpointConfigurationUsingPOST
     * @param representation representation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEndpointConfigurationUsingPOSTCall(EndpointConfigurationRepresentation representation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = representation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEndpointConfigurationUsingPOSTValidateBeforeCall(EndpointConfigurationRepresentation representation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'representation' is set
        if (representation == null) {
            throw new ApiException("Missing the required parameter 'representation' when calling createEndpointConfigurationUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createEndpointConfigurationUsingPOSTCall(representation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an endpoint
     * 
     * @param representation representation (required)
     * @return EndpointConfigurationRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointConfigurationRepresentation createEndpointConfigurationUsingPOST(EndpointConfigurationRepresentation representation) throws ApiException {
        ApiResponse<EndpointConfigurationRepresentation> resp = createEndpointConfigurationUsingPOSTWithHttpInfo(representation);
        return resp.getData();
    }

    /**
     * Create an endpoint
     * 
     * @param representation representation (required)
     * @return ApiResponse&lt;EndpointConfigurationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointConfigurationRepresentation> createEndpointConfigurationUsingPOSTWithHttpInfo(EndpointConfigurationRepresentation representation) throws ApiException {
        com.squareup.okhttp.Call call = createEndpointConfigurationUsingPOSTValidateBeforeCall(representation, null, null);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an endpoint (asynchronously)
     * 
     * @param representation representation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEndpointConfigurationUsingPOSTAsync(EndpointConfigurationRepresentation representation, final ApiCallback<EndpointConfigurationRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEndpointConfigurationUsingPOSTValidateBeforeCall(representation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBasicAuthConfigurationUsingGET
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBasicAuthConfigurationUsingGETCall(Long basicAuthId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/basic-auths/{basicAuthId}"
            .replaceAll("\\{" + "basicAuthId" + "\\}", apiClient.escapeString(basicAuthId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBasicAuthConfigurationUsingGETValidateBeforeCall(Long basicAuthId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'basicAuthId' is set
        if (basicAuthId == null) {
            throw new ApiException("Missing the required parameter 'basicAuthId' when calling getBasicAuthConfigurationUsingGET(Async)");
        }
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getBasicAuthConfigurationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getBasicAuthConfigurationUsingGETCall(basicAuthId, tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @return EndpointBasicAuthRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointBasicAuthRepresentation getBasicAuthConfigurationUsingGET(Long basicAuthId, Long tenantId) throws ApiException {
        ApiResponse<EndpointBasicAuthRepresentation> resp = getBasicAuthConfigurationUsingGETWithHttpInfo(basicAuthId, tenantId);
        return resp.getData();
    }

    /**
     * Get an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;EndpointBasicAuthRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointBasicAuthRepresentation> getBasicAuthConfigurationUsingGETWithHttpInfo(Long basicAuthId, Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getBasicAuthConfigurationUsingGETValidateBeforeCall(basicAuthId, tenantId, null, null);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an endpoint authorization (asynchronously)
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasicAuthConfigurationUsingGETAsync(Long basicAuthId, Long tenantId, final ApiCallback<EndpointBasicAuthRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasicAuthConfigurationUsingGETValidateBeforeCall(basicAuthId, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBasicAuthConfigurationsUsingGET
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBasicAuthConfigurationsUsingGETCall(Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/basic-auths";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBasicAuthConfigurationsUsingGETValidateBeforeCall(Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getBasicAuthConfigurationsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getBasicAuthConfigurationsUsingGETCall(tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List endpoint authorizations
     * 
     * @param tenantId tenantId (required)
     * @return List&lt;EndpointBasicAuthRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EndpointBasicAuthRepresentation> getBasicAuthConfigurationsUsingGET(Long tenantId) throws ApiException {
        ApiResponse<List<EndpointBasicAuthRepresentation>> resp = getBasicAuthConfigurationsUsingGETWithHttpInfo(tenantId);
        return resp.getData();
    }

    /**
     * List endpoint authorizations
     * 
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;List&lt;EndpointBasicAuthRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EndpointBasicAuthRepresentation>> getBasicAuthConfigurationsUsingGETWithHttpInfo(Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getBasicAuthConfigurationsUsingGETValidateBeforeCall(tenantId, null, null);
        Type localVarReturnType = new TypeToken<List<EndpointBasicAuthRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List endpoint authorizations (asynchronously)
     * 
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasicAuthConfigurationsUsingGETAsync(Long tenantId, final ApiCallback<List<EndpointBasicAuthRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasicAuthConfigurationsUsingGETValidateBeforeCall(tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EndpointBasicAuthRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEndpointConfigurationUsingGET1
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEndpointConfigurationUsingGET1Call(Long endpointConfigurationId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/endpoints/{endpointConfigurationId}"
            .replaceAll("\\{" + "endpointConfigurationId" + "\\}", apiClient.escapeString(endpointConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEndpointConfigurationUsingGET1ValidateBeforeCall(Long endpointConfigurationId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpointConfigurationId' is set
        if (endpointConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'endpointConfigurationId' when calling getEndpointConfigurationUsingGET1(Async)");
        }
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEndpointConfigurationUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getEndpointConfigurationUsingGET1Call(endpointConfigurationId, tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @return EndpointConfigurationRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointConfigurationRepresentation getEndpointConfigurationUsingGET1(Long endpointConfigurationId, Long tenantId) throws ApiException {
        ApiResponse<EndpointConfigurationRepresentation> resp = getEndpointConfigurationUsingGET1WithHttpInfo(endpointConfigurationId, tenantId);
        return resp.getData();
    }

    /**
     * Get an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;EndpointConfigurationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointConfigurationRepresentation> getEndpointConfigurationUsingGET1WithHttpInfo(Long endpointConfigurationId, Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getEndpointConfigurationUsingGET1ValidateBeforeCall(endpointConfigurationId, tenantId, null, null);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an endpoint (asynchronously)
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEndpointConfigurationUsingGET1Async(Long endpointConfigurationId, Long tenantId, final ApiCallback<EndpointConfigurationRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEndpointConfigurationUsingGET1ValidateBeforeCall(endpointConfigurationId, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEndpointConfigurationsUsingGET1
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEndpointConfigurationsUsingGET1Call(Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEndpointConfigurationsUsingGET1ValidateBeforeCall(Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEndpointConfigurationsUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getEndpointConfigurationsUsingGET1Call(tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List endpoints
     * 
     * @param tenantId tenantId (required)
     * @return List&lt;EndpointConfigurationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EndpointConfigurationRepresentation> getEndpointConfigurationsUsingGET1(Long tenantId) throws ApiException {
        ApiResponse<List<EndpointConfigurationRepresentation>> resp = getEndpointConfigurationsUsingGET1WithHttpInfo(tenantId);
        return resp.getData();
    }

    /**
     * List endpoints
     * 
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;List&lt;EndpointConfigurationRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EndpointConfigurationRepresentation>> getEndpointConfigurationsUsingGET1WithHttpInfo(Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getEndpointConfigurationsUsingGET1ValidateBeforeCall(tenantId, null, null);
        Type localVarReturnType = new TypeToken<List<EndpointConfigurationRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List endpoints (asynchronously)
     * 
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEndpointConfigurationsUsingGET1Async(Long tenantId, final ApiCallback<List<EndpointConfigurationRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEndpointConfigurationsUsingGET1ValidateBeforeCall(tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EndpointConfigurationRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeBasicAuthonfigurationUsingDELETE
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeBasicAuthonfigurationUsingDELETECall(Long basicAuthId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/basic-auths/{basicAuthId}"
            .replaceAll("\\{" + "basicAuthId" + "\\}", apiClient.escapeString(basicAuthId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeBasicAuthonfigurationUsingDELETEValidateBeforeCall(Long basicAuthId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'basicAuthId' is set
        if (basicAuthId == null) {
            throw new ApiException("Missing the required parameter 'basicAuthId' when calling removeBasicAuthonfigurationUsingDELETE(Async)");
        }
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling removeBasicAuthonfigurationUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeBasicAuthonfigurationUsingDELETECall(basicAuthId, tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeBasicAuthonfigurationUsingDELETE(Long basicAuthId, Long tenantId) throws ApiException {
        removeBasicAuthonfigurationUsingDELETEWithHttpInfo(basicAuthId, tenantId);
    }

    /**
     * Delete an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeBasicAuthonfigurationUsingDELETEWithHttpInfo(Long basicAuthId, Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = removeBasicAuthonfigurationUsingDELETEValidateBeforeCall(basicAuthId, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an endpoint authorization (asynchronously)
     * 
     * @param basicAuthId basicAuthId (required)
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeBasicAuthonfigurationUsingDELETEAsync(Long basicAuthId, Long tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeBasicAuthonfigurationUsingDELETEValidateBeforeCall(basicAuthId, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeEndpointConfigurationUsingDELETE
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeEndpointConfigurationUsingDELETECall(Long endpointConfigurationId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/endpoints/{endpointConfigurationId}"
            .replaceAll("\\{" + "endpointConfigurationId" + "\\}", apiClient.escapeString(endpointConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeEndpointConfigurationUsingDELETEValidateBeforeCall(Long endpointConfigurationId, Long tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpointConfigurationId' is set
        if (endpointConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'endpointConfigurationId' when calling removeEndpointConfigurationUsingDELETE(Async)");
        }
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling removeEndpointConfigurationUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = removeEndpointConfigurationUsingDELETECall(endpointConfigurationId, tenantId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeEndpointConfigurationUsingDELETE(Long endpointConfigurationId, Long tenantId) throws ApiException {
        removeEndpointConfigurationUsingDELETEWithHttpInfo(endpointConfigurationId, tenantId);
    }

    /**
     * Delete an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeEndpointConfigurationUsingDELETEWithHttpInfo(Long endpointConfigurationId, Long tenantId) throws ApiException {
        com.squareup.okhttp.Call call = removeEndpointConfigurationUsingDELETEValidateBeforeCall(endpointConfigurationId, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an endpoint (asynchronously)
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param tenantId tenantId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeEndpointConfigurationUsingDELETEAsync(Long endpointConfigurationId, Long tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeEndpointConfigurationUsingDELETEValidateBeforeCall(endpointConfigurationId, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateBasicAuthConfigurationUsingPUT
     * @param basicAuthId basicAuthId (required)
     * @param createRepresentation createRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBasicAuthConfigurationUsingPUTCall(Long basicAuthId, CreateEndpointBasicAuthRepresentation createRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/basic-auths/{basicAuthId}"
            .replaceAll("\\{" + "basicAuthId" + "\\}", apiClient.escapeString(basicAuthId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBasicAuthConfigurationUsingPUTValidateBeforeCall(Long basicAuthId, CreateEndpointBasicAuthRepresentation createRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'basicAuthId' is set
        if (basicAuthId == null) {
            throw new ApiException("Missing the required parameter 'basicAuthId' when calling updateBasicAuthConfigurationUsingPUT(Async)");
        }
        
        // verify the required parameter 'createRepresentation' is set
        if (createRepresentation == null) {
            throw new ApiException("Missing the required parameter 'createRepresentation' when calling updateBasicAuthConfigurationUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBasicAuthConfigurationUsingPUTCall(basicAuthId, createRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param createRepresentation createRepresentation (required)
     * @return EndpointBasicAuthRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointBasicAuthRepresentation updateBasicAuthConfigurationUsingPUT(Long basicAuthId, CreateEndpointBasicAuthRepresentation createRepresentation) throws ApiException {
        ApiResponse<EndpointBasicAuthRepresentation> resp = updateBasicAuthConfigurationUsingPUTWithHttpInfo(basicAuthId, createRepresentation);
        return resp.getData();
    }

    /**
     * Update an endpoint authorization
     * 
     * @param basicAuthId basicAuthId (required)
     * @param createRepresentation createRepresentation (required)
     * @return ApiResponse&lt;EndpointBasicAuthRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointBasicAuthRepresentation> updateBasicAuthConfigurationUsingPUTWithHttpInfo(Long basicAuthId, CreateEndpointBasicAuthRepresentation createRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = updateBasicAuthConfigurationUsingPUTValidateBeforeCall(basicAuthId, createRepresentation, null, null);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an endpoint authorization (asynchronously)
     * 
     * @param basicAuthId basicAuthId (required)
     * @param createRepresentation createRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBasicAuthConfigurationUsingPUTAsync(Long basicAuthId, CreateEndpointBasicAuthRepresentation createRepresentation, final ApiCallback<EndpointBasicAuthRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBasicAuthConfigurationUsingPUTValidateBeforeCall(basicAuthId, createRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointBasicAuthRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEndpointConfigurationUsingPUT
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param representation representation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEndpointConfigurationUsingPUTCall(Long endpointConfigurationId, EndpointConfigurationRepresentation representation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = representation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/endpoints/{endpointConfigurationId}"
            .replaceAll("\\{" + "endpointConfigurationId" + "\\}", apiClient.escapeString(endpointConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEndpointConfigurationUsingPUTValidateBeforeCall(Long endpointConfigurationId, EndpointConfigurationRepresentation representation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpointConfigurationId' is set
        if (endpointConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'endpointConfigurationId' when calling updateEndpointConfigurationUsingPUT(Async)");
        }
        
        // verify the required parameter 'representation' is set
        if (representation == null) {
            throw new ApiException("Missing the required parameter 'representation' when calling updateEndpointConfigurationUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEndpointConfigurationUsingPUTCall(endpointConfigurationId, representation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param representation representation (required)
     * @return EndpointConfigurationRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndpointConfigurationRepresentation updateEndpointConfigurationUsingPUT(Long endpointConfigurationId, EndpointConfigurationRepresentation representation) throws ApiException {
        ApiResponse<EndpointConfigurationRepresentation> resp = updateEndpointConfigurationUsingPUTWithHttpInfo(endpointConfigurationId, representation);
        return resp.getData();
    }

    /**
     * Update an endpoint
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param representation representation (required)
     * @return ApiResponse&lt;EndpointConfigurationRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndpointConfigurationRepresentation> updateEndpointConfigurationUsingPUTWithHttpInfo(Long endpointConfigurationId, EndpointConfigurationRepresentation representation) throws ApiException {
        com.squareup.okhttp.Call call = updateEndpointConfigurationUsingPUTValidateBeforeCall(endpointConfigurationId, representation, null, null);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an endpoint (asynchronously)
     * 
     * @param endpointConfigurationId endpointConfigurationId (required)
     * @param representation representation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEndpointConfigurationUsingPUTAsync(Long endpointConfigurationId, EndpointConfigurationRepresentation representation, final ApiCallback<EndpointConfigurationRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEndpointConfigurationUsingPUTValidateBeforeCall(endpointConfigurationId, representation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndpointConfigurationRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
