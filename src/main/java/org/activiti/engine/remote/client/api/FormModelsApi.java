/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.FormRepresentation;
import org.activiti.engine.remote.client.model.FormSaveRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationFormRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRuntimeFormRepresentation;
import org.activiti.engine.remote.client.model.RuntimeFormRepresentation;
import org.activiti.engine.remote.client.model.ValidationErrorRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FormModelsApi {
    private ApiClient apiClient;

    public FormModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FormModelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getFormEditorJsonUsingGET
     * @param formId formId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormEditorJsonUsingGETCall(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/forms/{formId}/editorJson"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormEditorJsonUsingGETValidateBeforeCall(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormEditorJsonUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFormEditorJsonUsingGETCall(formId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get form content
     * 
     * @param formId formId (required)
     * @return FormDefinitionRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormDefinitionRepresentation getFormEditorJsonUsingGET(Long formId) throws ApiException {
        ApiResponse<FormDefinitionRepresentation> resp = getFormEditorJsonUsingGETWithHttpInfo(formId);
        return resp.getData();
    }

    /**
     * Get form content
     * 
     * @param formId formId (required)
     * @return ApiResponse&lt;FormDefinitionRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormDefinitionRepresentation> getFormEditorJsonUsingGETWithHttpInfo(Long formId) throws ApiException {
        com.squareup.okhttp.Call call = getFormEditorJsonUsingGETValidateBeforeCall(formId, null, null);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get form content (asynchronously)
     * 
     * @param formId formId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormEditorJsonUsingGETAsync(Long formId, final ApiCallback<FormDefinitionRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormEditorJsonUsingGETValidateBeforeCall(formId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormDefinitionRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormHistoryUsingGET
     * @param formId formId (required)
     * @param formHistoryId formHistoryId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormHistoryUsingGETCall(Long formId, Long formHistoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models/{formId}/history/{formHistoryId}"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()))
            .replaceAll("\\{" + "formHistoryId" + "\\}", apiClient.escapeString(formHistoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormHistoryUsingGETValidateBeforeCall(Long formId, Long formHistoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormHistoryUsingGET(Async)");
        }
        
        // verify the required parameter 'formHistoryId' is set
        if (formHistoryId == null) {
            throw new ApiException("Missing the required parameter 'formHistoryId' when calling getFormHistoryUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFormHistoryUsingGETCall(formId, formHistoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get form history
     * 
     * @param formId formId (required)
     * @param formHistoryId formHistoryId (required)
     * @return FormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormRepresentation getFormHistoryUsingGET(Long formId, Long formHistoryId) throws ApiException {
        ApiResponse<FormRepresentation> resp = getFormHistoryUsingGETWithHttpInfo(formId, formHistoryId);
        return resp.getData();
    }

    /**
     * Get form history
     * 
     * @param formId formId (required)
     * @param formHistoryId formHistoryId (required)
     * @return ApiResponse&lt;FormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormRepresentation> getFormHistoryUsingGETWithHttpInfo(Long formId, Long formHistoryId) throws ApiException {
        com.squareup.okhttp.Call call = getFormHistoryUsingGETValidateBeforeCall(formId, formHistoryId, null, null);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get form history (asynchronously)
     * 
     * @param formId formId (required)
     * @param formHistoryId formHistoryId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormHistoryUsingGETAsync(Long formId, Long formHistoryId, final ApiCallback<FormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormHistoryUsingGETValidateBeforeCall(formId, formHistoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormUsingGET
     * @param formId formId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormUsingGETCall(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models/{formId}"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormUsingGETValidateBeforeCall(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFormUsingGETCall(formId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a form model
     * 
     * @param formId formId (required)
     * @return FormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormRepresentation getFormUsingGET(Long formId) throws ApiException {
        ApiResponse<FormRepresentation> resp = getFormUsingGETWithHttpInfo(formId);
        return resp.getData();
    }

    /**
     * Get a form model
     * 
     * @param formId formId (required)
     * @return ApiResponse&lt;FormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormRepresentation> getFormUsingGETWithHttpInfo(Long formId) throws ApiException {
        com.squareup.okhttp.Call call = getFormUsingGETValidateBeforeCall(formId, null, null);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a form model (asynchronously)
     * 
     * @param formId formId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormUsingGETAsync(Long formId, final ApiCallback<FormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormUsingGETValidateBeforeCall(formId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormUsingGET1
     * @param formId formId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormUsingGET1Call(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/forms/{formId}"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormUsingGET1ValidateBeforeCall(Long formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = getFormUsingGET1Call(formId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a form
     * 
     * @param formId formId (required)
     * @return RuntimeFormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuntimeFormRepresentation getFormUsingGET1(Long formId) throws ApiException {
        ApiResponse<RuntimeFormRepresentation> resp = getFormUsingGET1WithHttpInfo(formId);
        return resp.getData();
    }

    /**
     * Get a form
     * 
     * @param formId formId (required)
     * @return ApiResponse&lt;RuntimeFormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuntimeFormRepresentation> getFormUsingGET1WithHttpInfo(Long formId) throws ApiException {
        com.squareup.okhttp.Call call = getFormUsingGET1ValidateBeforeCall(formId, null, null);
        Type localVarReturnType = new TypeToken<RuntimeFormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a form (asynchronously)
     * 
     * @param formId formId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormUsingGET1Async(Long formId, final ApiCallback<RuntimeFormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormUsingGET1ValidateBeforeCall(formId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuntimeFormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormsUsingGET
     * @param formId formId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGETCall(List<String> formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models/values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (formId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "formId", formId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormsUsingGETValidateBeforeCall(List<String> formId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getFormsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFormsUsingGETCall(formId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get forms
     * 
     * @param formId formId (required)
     * @return List&lt;FormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormRepresentation> getFormsUsingGET(List<String> formId) throws ApiException {
        ApiResponse<List<FormRepresentation>> resp = getFormsUsingGETWithHttpInfo(formId);
        return resp.getData();
    }

    /**
     * Get forms
     * 
     * @param formId formId (required)
     * @return ApiResponse&lt;List&lt;FormRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormRepresentation>> getFormsUsingGETWithHttpInfo(List<String> formId) throws ApiException {
        com.squareup.okhttp.Call call = getFormsUsingGETValidateBeforeCall(formId, null, null);
        Type localVarReturnType = new TypeToken<List<FormRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get forms (asynchronously)
     * 
     * @param formId formId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGETAsync(List<String> formId, final ApiCallback<List<FormRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormsUsingGETValidateBeforeCall(formId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormsUsingGET1
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGET1Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormsUsingGET1ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFormsUsingGET1Call(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List form models
     * 
     * @return ResultListDataRepresentationFormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationFormRepresentation getFormsUsingGET1() throws ApiException {
        ApiResponse<ResultListDataRepresentationFormRepresentation> resp = getFormsUsingGET1WithHttpInfo();
        return resp.getData();
    }

    /**
     * List form models
     * 
     * @return ApiResponse&lt;ResultListDataRepresentationFormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationFormRepresentation> getFormsUsingGET1WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getFormsUsingGET1ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationFormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List form models (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGET1Async(final ApiCallback<ResultListDataRepresentationFormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormsUsingGET1ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationFormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormsUsingGET2
     * @param nameLike nameLike (optional)
     * @param appId appId (optional)
     * @param tenantId tenantId (optional)
     * @param start start (optional)
     * @param sort sort (optional)
     * @param order order (optional)
     * @param size size (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGET2Call(String nameLike, Long appId, Long tenantId, Integer start, String sort, String order, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/forms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nameLike != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nameLike", nameLike));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appId", appId));
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormsUsingGET2ValidateBeforeCall(String nameLike, Long appId, Long tenantId, Integer start, String sort, String order, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFormsUsingGET2Call(nameLike, appId, tenantId, start, sort, order, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query forms
     * 
     * @param nameLike nameLike (optional)
     * @param appId appId (optional)
     * @param tenantId tenantId (optional)
     * @param start start (optional)
     * @param sort sort (optional)
     * @param order order (optional)
     * @param size size (optional)
     * @return ResultListDataRepresentationRuntimeFormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationRuntimeFormRepresentation getFormsUsingGET2(String nameLike, Long appId, Long tenantId, Integer start, String sort, String order, Integer size) throws ApiException {
        ApiResponse<ResultListDataRepresentationRuntimeFormRepresentation> resp = getFormsUsingGET2WithHttpInfo(nameLike, appId, tenantId, start, sort, order, size);
        return resp.getData();
    }

    /**
     * Query forms
     * 
     * @param nameLike nameLike (optional)
     * @param appId appId (optional)
     * @param tenantId tenantId (optional)
     * @param start start (optional)
     * @param sort sort (optional)
     * @param order order (optional)
     * @param size size (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationRuntimeFormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationRuntimeFormRepresentation> getFormsUsingGET2WithHttpInfo(String nameLike, Long appId, Long tenantId, Integer start, String sort, String order, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getFormsUsingGET2ValidateBeforeCall(nameLike, appId, tenantId, start, sort, order, size, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeFormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query forms (asynchronously)
     * 
     * @param nameLike nameLike (optional)
     * @param appId appId (optional)
     * @param tenantId tenantId (optional)
     * @param start start (optional)
     * @param sort sort (optional)
     * @param order order (optional)
     * @param size size (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormsUsingGET2Async(String nameLike, Long appId, Long tenantId, Integer start, String sort, String order, Integer size, final ApiCallback<ResultListDataRepresentationRuntimeFormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormsUsingGET2ValidateBeforeCall(nameLike, appId, tenantId, start, sort, order, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationRuntimeFormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveFormUsingPUT
     * @param formId ID of the form to update (required)
     * @param saveRepresentation saveRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveFormUsingPUTCall(Long formId, FormSaveRepresentation saveRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = saveRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models/{formId}"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveFormUsingPUTValidateBeforeCall(Long formId, FormSaveRepresentation saveRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling saveFormUsingPUT(Async)");
        }
        
        // verify the required parameter 'saveRepresentation' is set
        if (saveRepresentation == null) {
            throw new ApiException("Missing the required parameter 'saveRepresentation' when calling saveFormUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = saveFormUsingPUTCall(formId, saveRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update form model content
     * 
     * @param formId ID of the form to update (required)
     * @param saveRepresentation saveRepresentation (required)
     * @return FormRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormRepresentation saveFormUsingPUT(Long formId, FormSaveRepresentation saveRepresentation) throws ApiException {
        ApiResponse<FormRepresentation> resp = saveFormUsingPUTWithHttpInfo(formId, saveRepresentation);
        return resp.getData();
    }

    /**
     * Update form model content
     * 
     * @param formId ID of the form to update (required)
     * @param saveRepresentation saveRepresentation (required)
     * @return ApiResponse&lt;FormRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormRepresentation> saveFormUsingPUTWithHttpInfo(Long formId, FormSaveRepresentation saveRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = saveFormUsingPUTValidateBeforeCall(formId, saveRepresentation, null, null);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update form model content (asynchronously)
     * 
     * @param formId ID of the form to update (required)
     * @param saveRepresentation saveRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveFormUsingPUTAsync(Long formId, FormSaveRepresentation saveRepresentation, final ApiCallback<FormRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveFormUsingPUTValidateBeforeCall(formId, saveRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateModelUsingPUT
     * @param formId formId (required)
     * @param saveRepresentation saveRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateModelUsingPUTCall(Long formId, FormSaveRepresentation saveRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = saveRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/editor/form-models/{formId}/validate"
            .replaceAll("\\{" + "formId" + "\\}", apiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateModelUsingPUTValidateBeforeCall(Long formId, FormSaveRepresentation saveRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling validateModelUsingPUT(Async)");
        }
        
        // verify the required parameter 'saveRepresentation' is set
        if (saveRepresentation == null) {
            throw new ApiException("Missing the required parameter 'saveRepresentation' when calling validateModelUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = validateModelUsingPUTCall(formId, saveRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Validate form model content
     * The model content to be validated must be specified in the POST body
     * @param formId formId (required)
     * @param saveRepresentation saveRepresentation (required)
     * @return List&lt;ValidationErrorRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ValidationErrorRepresentation> validateModelUsingPUT(Long formId, FormSaveRepresentation saveRepresentation) throws ApiException {
        ApiResponse<List<ValidationErrorRepresentation>> resp = validateModelUsingPUTWithHttpInfo(formId, saveRepresentation);
        return resp.getData();
    }

    /**
     * Validate form model content
     * The model content to be validated must be specified in the POST body
     * @param formId formId (required)
     * @param saveRepresentation saveRepresentation (required)
     * @return ApiResponse&lt;List&lt;ValidationErrorRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ValidationErrorRepresentation>> validateModelUsingPUTWithHttpInfo(Long formId, FormSaveRepresentation saveRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = validateModelUsingPUTValidateBeforeCall(formId, saveRepresentation, null, null);
        Type localVarReturnType = new TypeToken<List<ValidationErrorRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate form model content (asynchronously)
     * The model content to be validated must be specified in the POST body
     * @param formId formId (required)
     * @param saveRepresentation saveRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateModelUsingPUTAsync(Long formId, FormSaveRepresentation saveRepresentation, final ApiCallback<List<ValidationErrorRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateModelUsingPUTValidateBeforeCall(formId, saveRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ValidationErrorRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
