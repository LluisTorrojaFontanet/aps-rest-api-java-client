/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiCallback;
import org.activiti.engine.remote.client.ApiClient;
import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.ApiResponse;
import org.activiti.engine.remote.client.Configuration;
import org.activiti.engine.remote.client.Pair;
import org.activiti.engine.remote.client.ProgressRequestBody;
import org.activiti.engine.remote.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.activiti.engine.remote.client.model.AbstractUserRepresentation;
import org.activiti.engine.remote.client.model.BulkUserUpdateRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAbstractUserRepresentation;
import org.activiti.engine.remote.client.model.UserRepresentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminUsersApi {
    private ApiClient apiClient;

    public AdminUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for bulkUpdateUsersUsingPUT
     * @param update update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateUsersUsingPUTCall(BulkUserUpdateRepresentation update, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = update;

        // create path and map variables
        String localVarPath = "/enterprise/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpdateUsersUsingPUTValidateBeforeCall(BulkUserUpdateRepresentation update, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'update' is set
        if (update == null) {
            throw new ApiException("Missing the required parameter 'update' when calling bulkUpdateUsersUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = bulkUpdateUsersUsingPUTCall(update, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bulk update a list of users
     * 
     * @param update update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void bulkUpdateUsersUsingPUT(BulkUserUpdateRepresentation update) throws ApiException {
        bulkUpdateUsersUsingPUTWithHttpInfo(update);
    }

    /**
     * Bulk update a list of users
     * 
     * @param update update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> bulkUpdateUsersUsingPUTWithHttpInfo(BulkUserUpdateRepresentation update) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpdateUsersUsingPUTValidateBeforeCall(update, null, null);
        return apiClient.execute(call);
    }

    /**
     * Bulk update a list of users (asynchronously)
     * 
     * @param update update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateUsersUsingPUTAsync(BulkUserUpdateRepresentation update, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpdateUsersUsingPUTValidateBeforeCall(update, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createNewUserUsingPOST
     * @param userRepresentation userRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewUserUsingPOSTCall(UserRepresentation userRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewUserUsingPOSTValidateBeforeCall(UserRepresentation userRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userRepresentation' is set
        if (userRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userRepresentation' when calling createNewUserUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createNewUserUsingPOSTCall(userRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a user
     * 
     * @param userRepresentation userRepresentation (required)
     * @return UserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserRepresentation createNewUserUsingPOST(UserRepresentation userRepresentation) throws ApiException {
        ApiResponse<UserRepresentation> resp = createNewUserUsingPOSTWithHttpInfo(userRepresentation);
        return resp.getData();
    }

    /**
     * Create a user
     * 
     * @param userRepresentation userRepresentation (required)
     * @return ApiResponse&lt;UserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserRepresentation> createNewUserUsingPOSTWithHttpInfo(UserRepresentation userRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = createNewUserUsingPOSTValidateBeforeCall(userRepresentation, null, null);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a user (asynchronously)
     * 
     * @param userRepresentation userRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewUserUsingPOSTAsync(UserRepresentation userRepresentation, final ApiCallback<UserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewUserUsingPOSTValidateBeforeCall(userRepresentation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserUsingGET
     * @param userId userId (required)
     * @param summary summary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserUsingGETCall(Long userId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserUsingGETValidateBeforeCall(Long userId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserUsingGETCall(userId, summary, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user
     * 
     * @param userId userId (required)
     * @param summary summary (optional)
     * @return AbstractUserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractUserRepresentation getUserUsingGET(Long userId, Boolean summary) throws ApiException {
        ApiResponse<AbstractUserRepresentation> resp = getUserUsingGETWithHttpInfo(userId, summary);
        return resp.getData();
    }

    /**
     * Get a user
     * 
     * @param userId userId (required)
     * @param summary summary (optional)
     * @return ApiResponse&lt;AbstractUserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractUserRepresentation> getUserUsingGETWithHttpInfo(Long userId, Boolean summary) throws ApiException {
        com.squareup.okhttp.Call call = getUserUsingGETValidateBeforeCall(userId, summary, null, null);
        Type localVarReturnType = new TypeToken<AbstractUserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user (asynchronously)
     * 
     * @param userId userId (required)
     * @param summary summary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserUsingGETAsync(Long userId, Boolean summary, final ApiCallback<AbstractUserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserUsingGETValidateBeforeCall(userId, summary, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractUserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersUsingGET
     * @param filter filter (optional)
     * @param status status (optional)
     * @param accountType accountType (optional)
     * @param sort sort (optional)
     * @param company company (optional)
     * @param start start (optional)
     * @param page page (optional)
     * @param size size (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param summary summary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGETCall(String filter, String status, String accountType, String sort, String company, Integer start, Integer page, Integer size, Long groupId, Long tenantId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (accountType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountType", accountType));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company", company));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenantId", tenantId));
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersUsingGETValidateBeforeCall(String filter, String status, String accountType, String sort, String company, Integer start, Integer page, Integer size, Long groupId, Long tenantId, Boolean summary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUsersUsingGETCall(filter, status, accountType, sort, company, start, page, size, groupId, tenantId, summary, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query users
     * 
     * @param filter filter (optional)
     * @param status status (optional)
     * @param accountType accountType (optional)
     * @param sort sort (optional)
     * @param company company (optional)
     * @param start start (optional)
     * @param page page (optional)
     * @param size size (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param summary summary (optional)
     * @return ResultListDataRepresentationAbstractUserRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultListDataRepresentationAbstractUserRepresentation getUsersUsingGET(String filter, String status, String accountType, String sort, String company, Integer start, Integer page, Integer size, Long groupId, Long tenantId, Boolean summary) throws ApiException {
        ApiResponse<ResultListDataRepresentationAbstractUserRepresentation> resp = getUsersUsingGETWithHttpInfo(filter, status, accountType, sort, company, start, page, size, groupId, tenantId, summary);
        return resp.getData();
    }

    /**
     * Query users
     * 
     * @param filter filter (optional)
     * @param status status (optional)
     * @param accountType accountType (optional)
     * @param sort sort (optional)
     * @param company company (optional)
     * @param start start (optional)
     * @param page page (optional)
     * @param size size (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param summary summary (optional)
     * @return ApiResponse&lt;ResultListDataRepresentationAbstractUserRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultListDataRepresentationAbstractUserRepresentation> getUsersUsingGETWithHttpInfo(String filter, String status, String accountType, String sort, String company, Integer start, Integer page, Integer size, Long groupId, Long tenantId, Boolean summary) throws ApiException {
        com.squareup.okhttp.Call call = getUsersUsingGETValidateBeforeCall(filter, status, accountType, sort, company, start, page, size, groupId, tenantId, summary, null, null);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAbstractUserRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query users (asynchronously)
     * 
     * @param filter filter (optional)
     * @param status status (optional)
     * @param accountType accountType (optional)
     * @param sort sort (optional)
     * @param company company (optional)
     * @param start start (optional)
     * @param page page (optional)
     * @param size size (optional)
     * @param groupId groupId (optional)
     * @param tenantId tenantId (optional)
     * @param summary summary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGETAsync(String filter, String status, String accountType, String sort, String company, Integer start, Integer page, Integer size, Long groupId, Long tenantId, Boolean summary, final ApiCallback<ResultListDataRepresentationAbstractUserRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersUsingGETValidateBeforeCall(filter, status, accountType, sort, company, start, page, size, groupId, tenantId, summary, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultListDataRepresentationAbstractUserRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserDetailsUsingPUT
     * @param userId userId (required)
     * @param userRepresentation userRepresentation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserDetailsUsingPUTCall(Long userId, UserRepresentation userRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userRepresentation;

        // create path and map variables
        String localVarPath = "/enterprise/admin/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserDetailsUsingPUTValidateBeforeCall(Long userId, UserRepresentation userRepresentation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserDetailsUsingPUT(Async)");
        }
        
        // verify the required parameter 'userRepresentation' is set
        if (userRepresentation == null) {
            throw new ApiException("Missing the required parameter 'userRepresentation' when calling updateUserDetailsUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserDetailsUsingPUTCall(userId, userRepresentation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a user
     * 
     * @param userId userId (required)
     * @param userRepresentation userRepresentation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserDetailsUsingPUT(Long userId, UserRepresentation userRepresentation) throws ApiException {
        updateUserDetailsUsingPUTWithHttpInfo(userId, userRepresentation);
    }

    /**
     * Update a user
     * 
     * @param userId userId (required)
     * @param userRepresentation userRepresentation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserDetailsUsingPUTWithHttpInfo(Long userId, UserRepresentation userRepresentation) throws ApiException {
        com.squareup.okhttp.Call call = updateUserDetailsUsingPUTValidateBeforeCall(userId, userRepresentation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param userId userId (required)
     * @param userRepresentation userRepresentation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserDetailsUsingPUTAsync(Long userId, UserRepresentation userRepresentation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserDetailsUsingPUTValidateBeforeCall(userId, userRepresentation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
