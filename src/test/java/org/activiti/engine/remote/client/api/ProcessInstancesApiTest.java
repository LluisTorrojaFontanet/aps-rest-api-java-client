/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.CreateProcessInstanceRepresentation;
import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.HistoricProcessInstanceQueryRepresentation;
import org.activiti.engine.remote.client.model.IdentityLinkRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceAuditInfoRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceFilterRequestRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceQueryRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceVariableRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationDecisionTaskRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationProcessContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationProcessInstanceRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessInstancesApi
 */
@Ignore
public class ProcessInstancesApiTest {

    private final ProcessInstancesApi api = new ProcessInstancesApi();

    
    /**
     * Activate a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateProcessInstanceUsingPUTTest() throws ApiException {
        String processInstanceId = null;
        ProcessInstanceRepresentation response = api.activateProcessInstanceUsingPUT(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Add a user or group involvement to a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIdentityLinkUsingPOST1Test() throws ApiException {
        String processInstanceId = null;
        IdentityLinkRepresentation identityLinkRepresentation = null;
        IdentityLinkRepresentation response = api.createIdentityLinkUsingPOST1(processInstanceId, identityLinkRepresentation);

        // TODO: test validations
    }
    
    /**
     * Remove a user or group involvement from a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIdentityLinkUsingDELETE1Test() throws ApiException {
        String processInstanceId = null;
        String family = null;
        String identityId = null;
        String type = null;
        api.deleteIdentityLinkUsingDELETE1(processInstanceId, family, identityId, type);

        // TODO: test validations
    }
    
    /**
     * Cancel or remove a process instance
     *
     * If the process instance has not yet been completed, it will be cancelled. If it has already finished or been cancelled then the process instance will be removed and will no longer appear in queries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProcessInstanceUsingDELETETest() throws ApiException {
        String processInstanceId = null;
        api.deleteProcessInstanceUsingDELETE(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * List process instances using a filter
     *
     * The request body provided must define either a valid filterId value or filter object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterProcessInstancesUsingPOSTTest() throws ApiException {
        ProcessInstanceFilterRequestRepresentation filterRequest = null;
        ResultListDataRepresentationProcessInstanceRepresentation response = api.filterProcessInstancesUsingPOST(filterRequest);

        // TODO: test validations
    }
    
    /**
     * Get decision tasks in a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstanceDecisionTasksUsingGETTest() throws ApiException {
        String processInstanceId = null;
        ResultListDataRepresentationDecisionTaskRepresentation response = api.getHistoricProcessInstanceDecisionTasksUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Get historic variables for a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstanceVariablesUsingGETTest() throws ApiException {
        String processInstanceId = null;
        List<ProcessInstanceVariableRepresentation> response = api.getHistoricProcessInstanceVariablesUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Query historic process instances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoricProcessInstancesUsingPOSTTest() throws ApiException {
        HistoricProcessInstanceQueryRepresentation queryRequest = null;
        ResultListDataRepresentationProcessInstanceRepresentation response = api.getHistoricProcessInstancesUsingPOST(queryRequest);

        // TODO: test validations
    }
    
    /**
     * Get a user or group involvement with a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentityLinkTypeUsingGET1Test() throws ApiException {
        String processInstanceId = null;
        String family = null;
        String identityId = null;
        String type = null;
        IdentityLinkRepresentation response = api.getIdentityLinkTypeUsingGET1(processInstanceId, family, identityId, type);

        // TODO: test validations
    }
    
    /**
     * List either the users or groups involved with a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentityLinksForFamilyUsingGET1Test() throws ApiException {
        String processInstanceId = null;
        String family = null;
        List<IdentityLinkRepresentation> response = api.getIdentityLinksForFamilyUsingGET1(processInstanceId, family);

        // TODO: test validations
    }
    
    /**
     * List the users and groups involved with a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdentityLinksUsingGET1Test() throws ApiException {
        String processInstanceId = null;
        List<IdentityLinkRepresentation> response = api.getIdentityLinksUsingGET1(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * List content attached to process instance fields
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstanceContentUsingGETTest() throws ApiException {
        String processInstanceId = null;
        ResultListDataRepresentationProcessContentRepresentation response = api.getProcessInstanceContentUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Get the process diagram for the process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstanceDiagramUsingGETTest() throws ApiException {
        String processInstanceId = null;
        List<byte[]> response = api.getProcessInstanceDiagramUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Get a process instance start form
     *
     * The start form for a process instance can be retrieved when the process definition has a start form defined (hasStartForm &#x3D; true on the process instance)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstanceStartFormUsingGETTest() throws ApiException {
        String processInstanceId = null;
        FormDefinitionRepresentation response = api.getProcessInstanceStartFormUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Get a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstanceUsingGETTest() throws ApiException {
        String processInstanceId = null;
        ProcessInstanceRepresentation response = api.getProcessInstanceUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Query process instances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstancesUsingPOSTTest() throws ApiException {
        ProcessInstanceQueryRepresentation processInstancesQuery = null;
        ResultListDataRepresentationProcessInstanceRepresentation response = api.getProcessInstancesUsingPOST(processInstancesQuery);

        // TODO: test validations
    }
    
    /**
     * Get the audit log for a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskAuditLogUsingGETTest() throws ApiException {
        String processInstanceId = null;
        ProcessInstanceAuditInfoRepresentation response = api.getTaskAuditLogUsingGET(processInstanceId);

        // TODO: test validations
    }
    
    /**
     * Start a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startNewProcessInstanceUsingPOSTTest() throws ApiException {
        CreateProcessInstanceRepresentation startRequest = null;
        ProcessInstanceRepresentation response = api.startNewProcessInstanceUsingPOST(startRequest);

        // TODO: test validations
    }
    
    /**
     * Suspend a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void suspendProcessInstanceUsingPUTTest() throws ApiException {
        String processInstanceId = null;
        ProcessInstanceRepresentation response = api.suspendProcessInstanceUsingPUT(processInstanceId);

        // TODO: test validations
    }
    
}
