/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import java.io.File;
import org.activiti.engine.remote.client.model.ModelRepresentation;
import org.activiti.engine.remote.client.model.ObjectNode;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationModelRepresentation;
import org.activiti.engine.remote.client.model.ValidationErrorRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelsApi
 */
@Ignore
public class ModelsApiTest {

    private final ModelsApi api = new ModelsApi();

    
    /**
     * Create a new model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createModelUsingPOSTTest() throws ApiException {
        ModelRepresentation modelRepresentation = null;
        ModelRepresentation response = api.createModelUsingPOST(modelRepresentation);

        // TODO: test validations
    }
    
    /**
     * Delete a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelUsingDELETETest() throws ApiException {
        Long modelId = null;
        Boolean cascade = null;
        Boolean deleteRuntimeApp = null;
        api.deleteModelUsingDELETE(modelId, cascade, deleteRuntimeApp);

        // TODO: test validations
    }
    
    /**
     * Duplicate an existing model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateModelUsingPOSTTest() throws ApiException {
        Long modelId = null;
        ModelRepresentation modelRepresentation = null;
        ModelRepresentation response = api.duplicateModelUsingPOST(modelId, modelRepresentation);

        // TODO: test validations
    }
    
    /**
     * Get model content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelJSONUsingGETTest() throws ApiException {
        Long modelId = null;
        ObjectNode response = api.getModelJSONUsingGET(modelId);

        // TODO: test validations
    }
    
    /**
     * Get a model&#39;s thumbnail image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelThumbnailUsingGETTest() throws ApiException {
        Long modelId = null;
        List<byte[]> response = api.getModelThumbnailUsingGET(modelId);

        // TODO: test validations
    }
    
    /**
     * Get a model
     *
     * Models act as containers for process, form, decision table and app definitions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelUsingGETTest() throws ApiException {
        Long modelId = null;
        Boolean includePermissions = null;
        ModelRepresentation response = api.getModelUsingGET(modelId, includePermissions);

        // TODO: test validations
    }
    
    /**
     * List process definition models shared with the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsToIncludeInAppDefinitionUsingGETTest() throws ApiException {
        ResultListDataRepresentationModelRepresentation response = api.getModelsToIncludeInAppDefinitionUsingGET();

        // TODO: test validations
    }
    
    /**
     * List models (process, form, decision rule or app)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsUsingGETTest() throws ApiException {
        String filter = null;
        String sort = null;
        Integer modelType = null;
        Long referenceId = null;
        ResultListDataRepresentationModelRepresentation response = api.getModelsUsingGET(filter, sort, modelType, referenceId);

        // TODO: test validations
    }
    
    /**
     * Create a new version of a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importNewVersionUsingPOSTTest() throws ApiException {
        Long modelId = null;
        File file = null;
        ModelRepresentation response = api.importNewVersionUsingPOST(modelId, file);

        // TODO: test validations
    }
    
    /**
     * Import a BPMN 2.0 XML file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importProcessModelUsingPOSTTest() throws ApiException {
        File file = null;
        ModelRepresentation response = api.importProcessModelUsingPOST(file);

        // TODO: test validations
    }
    
    /**
     * Update model content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveModelUsingPOSTTest() throws ApiException {
        Long modelId = null;
        Object values = null;
        ModelRepresentation response = api.saveModelUsingPOST(modelId, values);

        // TODO: test validations
    }
    
    /**
     * Update a model
     *
     * This method allows you to update the metadata of a model. In order to update the content of the model you will need to call the specific endpoint for that model type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelUsingPUTTest() throws ApiException {
        Long modelId = null;
        ModelRepresentation updatedModel = null;
        ModelRepresentation response = api.updateModelUsingPUT(modelId, updatedModel);

        // TODO: test validations
    }
    
    /**
     * Validate model content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateModelUsingPOSTTest() throws ApiException {
        Long modelId = null;
        Object values = null;
        List<ValidationErrorRepresentation> response = api.validateModelUsingPOST(modelId, values);

        // TODO: test validations
    }
    
}
