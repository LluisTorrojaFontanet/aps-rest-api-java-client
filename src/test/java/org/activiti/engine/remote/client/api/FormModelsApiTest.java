/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.FormRepresentation;
import org.activiti.engine.remote.client.model.FormSaveRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationFormRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRuntimeFormRepresentation;
import org.activiti.engine.remote.client.model.RuntimeFormRepresentation;
import org.activiti.engine.remote.client.model.ValidationErrorRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FormModelsApi
 */
@Ignore
public class FormModelsApiTest {

    private final FormModelsApi api = new FormModelsApi();

    
    /**
     * Get form content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormEditorJsonUsingGETTest() throws ApiException {
        Long formId = null;
        FormDefinitionRepresentation response = api.getFormEditorJsonUsingGET(formId);

        // TODO: test validations
    }
    
    /**
     * Get form history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormHistoryUsingGETTest() throws ApiException {
        Long formId = null;
        Long formHistoryId = null;
        FormRepresentation response = api.getFormHistoryUsingGET(formId, formHistoryId);

        // TODO: test validations
    }
    
    /**
     * Get a form model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormUsingGETTest() throws ApiException {
        Long formId = null;
        FormRepresentation response = api.getFormUsingGET(formId);

        // TODO: test validations
    }
    
    /**
     * Get a form
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormUsingGET1Test() throws ApiException {
        Long formId = null;
        RuntimeFormRepresentation response = api.getFormUsingGET1(formId);

        // TODO: test validations
    }
    
    /**
     * Get forms
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormsUsingGETTest() throws ApiException {
        List<String> formId = null;
        List<FormRepresentation> response = api.getFormsUsingGET(formId);

        // TODO: test validations
    }
    
    /**
     * List form models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormsUsingGET1Test() throws ApiException {
        ResultListDataRepresentationFormRepresentation response = api.getFormsUsingGET1();

        // TODO: test validations
    }
    
    /**
     * Query forms
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormsUsingGET2Test() throws ApiException {
        String nameLike = null;
        Long appId = null;
        Long tenantId = null;
        Integer start = null;
        String sort = null;
        String order = null;
        Integer size = null;
        ResultListDataRepresentationRuntimeFormRepresentation response = api.getFormsUsingGET2(nameLike, appId, tenantId, start, sort, order, size);

        // TODO: test validations
    }
    
    /**
     * Update form model content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveFormUsingPUTTest() throws ApiException {
        Long formId = null;
        FormSaveRepresentation saveRepresentation = null;
        FormRepresentation response = api.saveFormUsingPUT(formId, saveRepresentation);

        // TODO: test validations
    }
    
    /**
     * Validate form model content
     *
     * The model content to be validated must be specified in the POST body
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateModelUsingPUTTest() throws ApiException {
        Long formId = null;
        FormSaveRepresentation saveRepresentation = null;
        List<ValidationErrorRepresentation> response = api.validateModelUsingPUT(formId, saveRepresentation);

        // TODO: test validations
    }
    
}
