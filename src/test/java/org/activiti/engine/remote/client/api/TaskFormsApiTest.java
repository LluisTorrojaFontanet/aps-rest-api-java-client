/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.CompleteFormRepresentation;
import org.activiti.engine.remote.client.model.FormDefinitionRepresentation;
import org.activiti.engine.remote.client.model.FormValueRepresentation;
import org.activiti.engine.remote.client.model.ProcessInstanceVariableRepresentation;
import org.activiti.engine.remote.client.model.SaveFormRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskFormsApi
 */
@Ignore
public class TaskFormsApiTest {

    private final TaskFormsApi api = new TaskFormsApi();

    
    /**
     * Complete a task form
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeTaskFormUsingPOSTTest() throws ApiException {
        String taskId = null;
        CompleteFormRepresentation completeTaskFormRepresentation = null;
        api.completeTaskFormUsingPOST(taskId, completeTaskFormRepresentation);

        // TODO: test validations
    }
    
    /**
     * Get task variables
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProcessInstanceVariablesUsingGET1Test() throws ApiException {
        String taskId = null;
        List<ProcessInstanceVariableRepresentation> response = api.getProcessInstanceVariablesUsingGET1(taskId);

        // TODO: test validations
    }
    
    /**
     * Retrieve column field values
     *
     * Specific case to retrieve information on a specific column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestFieldValuesUsingGET1Test() throws ApiException {
        String taskId = null;
        String field = null;
        String column = null;
        List<FormValueRepresentation> response = api.getRestFieldValuesUsingGET1(taskId, field, column);

        // TODO: test validations
    }
    
    /**
     * Retrieve populated field values
     *
     * Form field values that are populated through a REST backend, can be retrieved via this service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestFieldValuesUsingGET2Test() throws ApiException {
        String taskId = null;
        String field = null;
        List<FormValueRepresentation> response = api.getRestFieldValuesUsingGET2(taskId, field);

        // TODO: test validations
    }
    
    /**
     * Get a task form
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskFormUsingGETTest() throws ApiException {
        String taskId = null;
        FormDefinitionRepresentation response = api.getTaskFormUsingGET(taskId);

        // TODO: test validations
    }
    
    /**
     * Save a task form
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveTaskFormUsingPOSTTest() throws ApiException {
        String taskId = null;
        SaveFormRepresentation saveTaskFormRepresentation = null;
        api.saveTaskFormUsingPOST(taskId, saveTaskFormRepresentation);

        // TODO: test validations
    }
    
}
