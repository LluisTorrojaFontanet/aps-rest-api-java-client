/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.CreateEndpointBasicAuthRepresentation;
import org.activiti.engine.remote.client.model.EndpointBasicAuthRepresentation;
import org.activiti.engine.remote.client.model.EndpointConfigurationRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminEndpointsApi
 */
@Ignore
public class AdminEndpointsApiTest {

    private final AdminEndpointsApi api = new AdminEndpointsApi();

    
    /**
     * Add an endpoint authorization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBasicAuthConfigurationUsingPOSTTest() throws ApiException {
        CreateEndpointBasicAuthRepresentation createRepresentation = null;
        EndpointBasicAuthRepresentation response = api.createBasicAuthConfigurationUsingPOST(createRepresentation);

        // TODO: test validations
    }
    
    /**
     * Create an endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEndpointConfigurationUsingPOSTTest() throws ApiException {
        EndpointConfigurationRepresentation representation = null;
        EndpointConfigurationRepresentation response = api.createEndpointConfigurationUsingPOST(representation);

        // TODO: test validations
    }
    
    /**
     * Get an endpoint authorization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBasicAuthConfigurationUsingGETTest() throws ApiException {
        Long basicAuthId = null;
        Long tenantId = null;
        EndpointBasicAuthRepresentation response = api.getBasicAuthConfigurationUsingGET(basicAuthId, tenantId);

        // TODO: test validations
    }
    
    /**
     * List endpoint authorizations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBasicAuthConfigurationsUsingGETTest() throws ApiException {
        Long tenantId = null;
        List<EndpointBasicAuthRepresentation> response = api.getBasicAuthConfigurationsUsingGET(tenantId);

        // TODO: test validations
    }
    
    /**
     * Get an endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointConfigurationUsingGET1Test() throws ApiException {
        Long endpointConfigurationId = null;
        Long tenantId = null;
        EndpointConfigurationRepresentation response = api.getEndpointConfigurationUsingGET1(endpointConfigurationId, tenantId);

        // TODO: test validations
    }
    
    /**
     * List endpoints
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointConfigurationsUsingGET1Test() throws ApiException {
        Long tenantId = null;
        List<EndpointConfigurationRepresentation> response = api.getEndpointConfigurationsUsingGET1(tenantId);

        // TODO: test validations
    }
    
    /**
     * Delete an endpoint authorization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeBasicAuthonfigurationUsingDELETETest() throws ApiException {
        Long basicAuthId = null;
        Long tenantId = null;
        api.removeBasicAuthonfigurationUsingDELETE(basicAuthId, tenantId);

        // TODO: test validations
    }
    
    /**
     * Delete an endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeEndpointConfigurationUsingDELETETest() throws ApiException {
        Long endpointConfigurationId = null;
        Long tenantId = null;
        api.removeEndpointConfigurationUsingDELETE(endpointConfigurationId, tenantId);

        // TODO: test validations
    }
    
    /**
     * Update an endpoint authorization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBasicAuthConfigurationUsingPUTTest() throws ApiException {
        Long basicAuthId = null;
        CreateEndpointBasicAuthRepresentation createRepresentation = null;
        EndpointBasicAuthRepresentation response = api.updateBasicAuthConfigurationUsingPUT(basicAuthId, createRepresentation);

        // TODO: test validations
    }
    
    /**
     * Update an endpoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEndpointConfigurationUsingPUTTest() throws ApiException {
        Long endpointConfigurationId = null;
        EndpointConfigurationRepresentation representation = null;
        EndpointConfigurationRepresentation response = api.updateEndpointConfigurationUsingPUT(endpointConfigurationId, representation);

        // TODO: test validations
    }
    
}
