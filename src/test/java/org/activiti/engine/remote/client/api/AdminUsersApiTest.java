/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.AbstractUserRepresentation;
import org.activiti.engine.remote.client.model.BulkUserUpdateRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationAbstractUserRepresentation;
import org.activiti.engine.remote.client.model.UserRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminUsersApi
 */
@Ignore
public class AdminUsersApiTest {

    private final AdminUsersApi api = new AdminUsersApi();

    
    /**
     * Bulk update a list of users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkUpdateUsersUsingPUTTest() throws ApiException {
        BulkUserUpdateRepresentation update = null;
        api.bulkUpdateUsersUsingPUT(update);

        // TODO: test validations
    }
    
    /**
     * Create a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewUserUsingPOSTTest() throws ApiException {
        UserRepresentation userRepresentation = null;
        UserRepresentation response = api.createNewUserUsingPOST(userRepresentation);

        // TODO: test validations
    }
    
    /**
     * Get a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGETTest() throws ApiException {
        Long userId = null;
        Boolean summary = null;
        AbstractUserRepresentation response = api.getUserUsingGET(userId, summary);

        // TODO: test validations
    }
    
    /**
     * Query users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUsingGETTest() throws ApiException {
        String filter = null;
        String status = null;
        String accountType = null;
        String sort = null;
        String company = null;
        Integer start = null;
        Integer page = null;
        Integer size = null;
        Long groupId = null;
        Long tenantId = null;
        Boolean summary = null;
        ResultListDataRepresentationAbstractUserRepresentation response = api.getUsersUsingGET(filter, status, accountType, sort, company, start, page, size, groupId, tenantId, summary);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserDetailsUsingPUTTest() throws ApiException {
        Long userId = null;
        UserRepresentation userRepresentation = null;
        api.updateUserDetailsUsingPUT(userId, userRepresentation);

        // TODO: test validations
    }
    
}
