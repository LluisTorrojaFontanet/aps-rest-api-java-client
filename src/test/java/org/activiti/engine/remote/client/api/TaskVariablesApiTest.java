/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.RestVariable;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskVariablesApi
 */
@Ignore
public class TaskVariablesApiTest {

    private final TaskVariablesApi api = new TaskVariablesApi();

    
    /**
     * Create variables
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskVariableUsingPOSTTest() throws ApiException {
        String taskId = null;
        List<RestVariable> restVariables = null;
        List<RestVariable> response = api.createTaskVariableUsingPOST(taskId, restVariables);

        // TODO: test validations
    }
    
    /**
     * Create or update variables
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllLocalTaskVariablesUsingDELETETest() throws ApiException {
        String taskId = null;
        api.deleteAllLocalTaskVariablesUsingDELETE(taskId);

        // TODO: test validations
    }
    
    /**
     * Delete a variable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVariableUsingDELETETest() throws ApiException {
        String taskId = null;
        String variableName = null;
        String scope = null;
        api.deleteVariableUsingDELETE(taskId, variableName, scope);

        // TODO: test validations
    }
    
    /**
     * Get a variable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableUsingGETTest() throws ApiException {
        String taskId = null;
        String variableName = null;
        String scope = null;
        RestVariable response = api.getVariableUsingGET(taskId, variableName, scope);

        // TODO: test validations
    }
    
    /**
     * List variables
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariablesUsingGETTest() throws ApiException {
        String taskId = null;
        String scope = null;
        List<RestVariable> response = api.getVariablesUsingGET(taskId, scope);

        // TODO: test validations
    }
    
    /**
     * Update a variable
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVariableUsingPUTTest() throws ApiException {
        String taskId = null;
        String variableName = null;
        RestVariable restVariable = null;
        RestVariable response = api.updateVariableUsingPUT(taskId, variableName, restVariable);

        // TODO: test validations
    }
    
}
