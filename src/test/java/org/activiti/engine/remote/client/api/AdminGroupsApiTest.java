/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.AbstractGroupRepresentation;
import org.activiti.engine.remote.client.model.AddGroupCapabilitiesRepresentation;
import org.activiti.engine.remote.client.model.GroupRepresentation;
import org.activiti.engine.remote.client.model.LightGroupRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationLightUserRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminGroupsApi
 */
@Ignore
public class AdminGroupsApiTest {

    private final AdminGroupsApi api = new AdminGroupsApi();

    
    /**
     * Activate a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateUsingPOSTTest() throws ApiException {
        Long groupId = null;
        api.activateUsingPOST(groupId);

        // TODO: test validations
    }
    
    /**
     * Add users to a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAllUsersToGroupUsingPOSTTest() throws ApiException {
        Long groupId = null;
        api.addAllUsersToGroupUsingPOST(groupId);

        // TODO: test validations
    }
    
    /**
     * Add capabilities to a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupCapabilitiesUsingPOSTTest() throws ApiException {
        Long groupId = null;
        AddGroupCapabilitiesRepresentation addGroupCapabilitiesRepresentation = null;
        api.addGroupCapabilitiesUsingPOST(groupId, addGroupCapabilitiesRepresentation);

        // TODO: test validations
    }
    
    /**
     * Add a user to a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupMemberUsingPOSTTest() throws ApiException {
        Long groupId = null;
        Long userId = null;
        api.addGroupMemberUsingPOST(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Get a related group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRelatedGroupUsingPOSTTest() throws ApiException {
        Long groupId = null;
        Long relatedGroupId = null;
        String type = null;
        api.addRelatedGroupUsingPOST(groupId, relatedGroupId, type);

        // TODO: test validations
    }
    
    /**
     * Create a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewGroupUsingPOSTTest() throws ApiException {
        GroupRepresentation groupRepresentation = null;
        GroupRepresentation response = api.createNewGroupUsingPOST(groupRepresentation);

        // TODO: test validations
    }
    
    /**
     * Remove a capability from a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupCapabilityUsingDELETETest() throws ApiException {
        Long groupId = null;
        Long groupCapabilityId = null;
        api.deleteGroupCapabilityUsingDELETE(groupId, groupCapabilityId);

        // TODO: test validations
    }
    
    /**
     * Delete a member from a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupMemberUsingDELETETest() throws ApiException {
        Long groupId = null;
        Long userId = null;
        api.deleteGroupMemberUsingDELETE(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupUsingDELETETest() throws ApiException {
        Long groupId = null;
        api.deleteGroupUsingDELETE(groupId);

        // TODO: test validations
    }
    
    /**
     * Delete a related group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRelatedGroupUsingDELETETest() throws ApiException {
        Long groupId = null;
        Long relatedGroupId = null;
        api.deleteRelatedGroupUsingDELETE(groupId, relatedGroupId);

        // TODO: test validations
    }
    
    /**
     * List group capabilities
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCapabilitiesUsingGETTest() throws ApiException {
        Long groupId = null;
        List<String> response = api.getCapabilitiesUsingGET(groupId);

        // TODO: test validations
    }
    
    /**
     * Get group members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupUsersUsingGETTest() throws ApiException {
        Long groupId = null;
        String filter = null;
        Integer page = null;
        Integer pageSize = null;
        ResultListDataRepresentationLightUserRepresentation response = api.getGroupUsersUsingGET(groupId, filter, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupUsingGETTest() throws ApiException {
        Long groupId = null;
        Boolean includeAllUsers = null;
        Boolean summary = null;
        AbstractGroupRepresentation response = api.getGroupUsingGET(groupId, includeAllUsers, summary);

        // TODO: test validations
    }
    
    /**
     * Query groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsUsingGET1Test() throws ApiException {
        Long tenantId = null;
        Boolean functional = null;
        Boolean summary = null;
        List<LightGroupRepresentation> response = api.getGroupsUsingGET1(tenantId, functional, summary);

        // TODO: test validations
    }
    
    /**
     * Get related groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelatedGroupsUsingGETTest() throws ApiException {
        Long groupId = null;
        List<LightGroupRepresentation> response = api.getRelatedGroupsUsingGET(groupId);

        // TODO: test validations
    }
    
    /**
     * Update a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupUsingPUTTest() throws ApiException {
        Long groupId = null;
        GroupRepresentation groupRepresentation = null;
        GroupRepresentation response = api.updateGroupUsingPUT(groupId, groupRepresentation);

        // TODO: test validations
    }
    
}
