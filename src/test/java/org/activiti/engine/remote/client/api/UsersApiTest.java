/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.ResetPasswordRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationLightUserRepresentation;
import org.activiti.engine.remote.client.model.UserActionRepresentation;
import org.activiti.engine.remote.client.model.UserRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Execute an action for a specific user
     *
     * Typical action is updating/reset password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeActionUsingPOSTTest() throws ApiException {
        Long userId = null;
        UserActionRepresentation actionRequest = null;
        api.executeActionUsingPOST(userId, actionRequest);

        // TODO: test validations
    }
    
    /**
     * Stream user profile picture
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfilePictureUsingGET1Test() throws ApiException {
        Long userId = null;
        api.getProfilePictureUsingGET1(userId);

        // TODO: test validations
    }
    
    /**
     * Get a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGET1Test() throws ApiException {
        Long userId = null;
        UserRepresentation response = api.getUserUsingGET1(userId);

        // TODO: test validations
    }
    
    /**
     * Query users
     *
     * A common use case is that a user wants to select another user (eg. when assigning a task) or group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUsingGET1Test() throws ApiException {
        String filter = null;
        String email = null;
        String externalId = null;
        String externalIdCaseInsensitive = null;
        String excludeTaskId = null;
        String excludeProcessId = null;
        Long groupId = null;
        Long tenantId = null;
        ResultListDataRepresentationLightUserRepresentation response = api.getUsersUsingGET1(filter, email, externalId, externalIdCaseInsensitive, excludeTaskId, excludeProcessId, groupId, tenantId);

        // TODO: test validations
    }
    
    /**
     * Request a password reset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetUsingPOSTTest() throws ApiException {
        ResetPasswordRepresentation resetPassword = null;
        api.requestPasswordResetUsingPOST(resetPassword);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPUTTest() throws ApiException {
        Long userId = null;
        UserRepresentation userRequest = null;
        UserRepresentation response = api.updateUserUsingPUT(userId, userRequest);

        // TODO: test validations
    }
    
}
