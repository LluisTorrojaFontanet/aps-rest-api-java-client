/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import java.io.File;
import org.activiti.engine.remote.client.model.RelatedContentRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationRelatedContentRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Ignore
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    
    /**
     * Attach existing content to a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRelatedContentOnProcessInstanceUsingPOSTTest() throws ApiException {
        String processInstanceId = null;
        RelatedContentRepresentation relatedContent = null;
        Boolean isRelatedContent = null;
        RelatedContentRepresentation response = api.createRelatedContentOnProcessInstanceUsingPOST(processInstanceId, relatedContent, isRelatedContent);

        // TODO: test validations
    }
    
    /**
     * Upload content and attach to a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRelatedContentOnProcessInstanceUsingPOST1Test() throws ApiException {
        String processInstanceId = null;
        File file = null;
        Boolean isRelatedContent = null;
        RelatedContentRepresentation response = api.createRelatedContentOnProcessInstanceUsingPOST1(processInstanceId, file, isRelatedContent);

        // TODO: test validations
    }
    
    /**
     * Attach existing content to a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRelatedContentOnTaskUsingPOSTTest() throws ApiException {
        String taskId = null;
        RelatedContentRepresentation relatedContent = null;
        Boolean isRelatedContent = null;
        RelatedContentRepresentation response = api.createRelatedContentOnTaskUsingPOST(taskId, relatedContent, isRelatedContent);

        // TODO: test validations
    }
    
    /**
     * Upload content and attach to a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRelatedContentOnTaskUsingPOST1Test() throws ApiException {
        String taskId = null;
        File file = null;
        Boolean isRelatedContent = null;
        RelatedContentRepresentation response = api.createRelatedContentOnTaskUsingPOST1(taskId, file, isRelatedContent);

        // TODO: test validations
    }
    
    /**
     * Upload content and create a local representation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemporaryRawRelatedContentUsingPOSTTest() throws ApiException {
        File file = null;
        RelatedContentRepresentation response = api.createTemporaryRawRelatedContentUsingPOST(file);

        // TODO: test validations
    }
    
    /**
     * Create a local representation of content from a remote repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemporaryRelatedContentUsingPOSTTest() throws ApiException {
        RelatedContentRepresentation relatedContent = null;
        RelatedContentRepresentation response = api.createTemporaryRelatedContentUsingPOST(relatedContent);

        // TODO: test validations
    }
    
    /**
     * Remove a local content representation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContentUsingDELETETest() throws ApiException {
        Long contentId = null;
        api.deleteContentUsingDELETE(contentId);

        // TODO: test validations
    }
    
    /**
     * Get a local content representation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContentUsingGETTest() throws ApiException {
        Long contentId = null;
        RelatedContentRepresentation response = api.getContentUsingGET(contentId);

        // TODO: test validations
    }
    
    /**
     * Stream content rendition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawContentUsingGETTest() throws ApiException {
        Long contentId = null;
        String renditionType = null;
        api.getRawContentUsingGET(contentId, renditionType);

        // TODO: test validations
    }
    
    /**
     * Stream content from a local content representation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawContentUsingGET1Test() throws ApiException {
        Long contentId = null;
        api.getRawContentUsingGET1(contentId);

        // TODO: test validations
    }
    
    /**
     * List content attached to a process instance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelatedContentForProcessInstanceUsingGETTest() throws ApiException {
        String processInstanceId = null;
        Boolean isRelatedContent = null;
        ResultListDataRepresentationRelatedContentRepresentation response = api.getRelatedContentForProcessInstanceUsingGET(processInstanceId, isRelatedContent);

        // TODO: test validations
    }
    
    /**
     * List content attached to a task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelatedContentForTaskUsingGETTest() throws ApiException {
        String taskId = null;
        Boolean isRelatedContent = null;
        ResultListDataRepresentationRelatedContentRepresentation response = api.getRelatedContentForTaskUsingGET(taskId, isRelatedContent);

        // TODO: test validations
    }
    
}
