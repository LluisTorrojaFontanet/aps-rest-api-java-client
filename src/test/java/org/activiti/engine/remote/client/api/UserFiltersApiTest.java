/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
import org.activiti.engine.remote.client.model.ResultListDataRepresentationUserTaskFilterRepresentation;
import org.activiti.engine.remote.client.model.UserFilterOrderRepresentation;
import org.activiti.engine.remote.client.model.UserProcessInstanceFilterRepresentation;
import org.activiti.engine.remote.client.model.UserTaskFilterRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserFiltersApi
 */
@Ignore
public class UserFiltersApiTest {

    private final UserFiltersApi api = new UserFiltersApi();

    
    /**
     * Create a process instance filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserProcessInstanceFilterUsingPOSTTest() throws ApiException {
        UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation = null;
        UserProcessInstanceFilterRepresentation response = api.createUserProcessInstanceFilterUsingPOST(userProcessInstanceFilterRepresentation);

        // TODO: test validations
    }
    
    /**
     * Create a task filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTaskFilterUsingPOSTTest() throws ApiException {
        UserTaskFilterRepresentation userTaskFilterRepresentation = null;
        UserTaskFilterRepresentation response = api.createUserTaskFilterUsingPOST(userTaskFilterRepresentation);

        // TODO: test validations
    }
    
    /**
     * Delete a process instance filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserProcessInstanceFilterUsingDELETETest() throws ApiException {
        Long userFilterId = null;
        api.deleteUserProcessInstanceFilterUsingDELETE(userFilterId);

        // TODO: test validations
    }
    
    /**
     * Delete a task filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTaskFilterUsingDELETETest() throws ApiException {
        Long userFilterId = null;
        api.deleteUserTaskFilterUsingDELETE(userFilterId);

        // TODO: test validations
    }
    
    /**
     * Get a process instance filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProcessInstanceFilterUsingGETTest() throws ApiException {
        Long userFilterId = null;
        UserProcessInstanceFilterRepresentation response = api.getUserProcessInstanceFilterUsingGET(userFilterId);

        // TODO: test validations
    }
    
    /**
     * List process instance filters
     *
     * Returns filters for the current user, optionally filtered by *appId*.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProcessInstanceFiltersUsingGETTest() throws ApiException {
        Long appId = null;
        ResultListDataRepresentationUserProcessInstanceFilterRepresentation response = api.getUserProcessInstanceFiltersUsingGET(appId);

        // TODO: test validations
    }
    
    /**
     * Get a task filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTaskFilterUsingGETTest() throws ApiException {
        Long userFilterId = null;
        UserTaskFilterRepresentation response = api.getUserTaskFilterUsingGET(userFilterId);

        // TODO: test validations
    }
    
    /**
     * List task filters
     *
     * Returns filters for the current user, optionally filtered by *appId*.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTaskFiltersUsingGETTest() throws ApiException {
        Long appId = null;
        ResultListDataRepresentationUserTaskFilterRepresentation response = api.getUserTaskFiltersUsingGET(appId);

        // TODO: test validations
    }
    
    /**
     * Re-order the list of user process instance filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderUserProcessInstanceFiltersUsingPUTTest() throws ApiException {
        UserFilterOrderRepresentation filterOrderRepresentation = null;
        api.orderUserProcessInstanceFiltersUsingPUT(filterOrderRepresentation);

        // TODO: test validations
    }
    
    /**
     * Re-order the list of user task filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderUserTaskFiltersUsingPUTTest() throws ApiException {
        UserFilterOrderRepresentation filterOrderRepresentation = null;
        api.orderUserTaskFiltersUsingPUT(filterOrderRepresentation);

        // TODO: test validations
    }
    
    /**
     * Update a process instance filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserProcessInstanceFilterUsingPUTTest() throws ApiException {
        Long userFilterId = null;
        UserProcessInstanceFilterRepresentation userProcessInstanceFilterRepresentation = null;
        UserProcessInstanceFilterRepresentation response = api.updateUserProcessInstanceFilterUsingPUT(userFilterId, userProcessInstanceFilterRepresentation);

        // TODO: test validations
    }
    
    /**
     * Update a task filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTaskFilterUsingPUTTest() throws ApiException {
        Long userFilterId = null;
        UserTaskFilterRepresentation userTaskFilterRepresentation = null;
        UserTaskFilterRepresentation response = api.updateUserTaskFilterUsingPUT(userFilterId, userTaskFilterRepresentation);

        // TODO: test validations
    }
    
}
