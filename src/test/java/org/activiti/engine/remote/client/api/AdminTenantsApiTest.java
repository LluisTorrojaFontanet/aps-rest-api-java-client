/*
 * Process Services Enterprise API
 * Provides access to the complete features provided by Alfresco Process Services powered by Activiti.  You can use this API to integrate Alfresco Process Services with external applications.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.activiti.engine.remote.client.api;

import org.activiti.engine.remote.client.ApiException;
import org.activiti.engine.remote.client.model.CreateTenantRepresentation;
import java.io.File;
import org.activiti.engine.remote.client.model.ImageUploadRepresentation;
import org.activiti.engine.remote.client.model.LightTenantRepresentation;
import org.activiti.engine.remote.client.model.TenantEvent;
import org.activiti.engine.remote.client.model.TenantRepresentation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminTenantsApi
 */
@Ignore
public class AdminTenantsApiTest {

    private final AdminTenantsApi api = new AdminTenantsApi();

    
    /**
     * Create a tenant
     *
     * Only a tenant manager may access this endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTenantUsingPOSTTest() throws ApiException {
        CreateTenantRepresentation createTenantRepresentation = null;
        LightTenantRepresentation response = api.createTenantUsingPOST(createTenantRepresentation);

        // TODO: test validations
    }
    
    /**
     * Delete a tenant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTenantUsingDELETETest() throws ApiException {
        Long tenantId = null;
        api.deleteTenantUsingDELETE(tenantId);

        // TODO: test validations
    }
    
    /**
     * Get tenant events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantEventsUsingGETTest() throws ApiException {
        Long tenantId = null;
        List<TenantEvent> response = api.getTenantEventsUsingGET(tenantId);

        // TODO: test validations
    }
    
    /**
     * Get a tenant&#39;s logo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantLogoUsingGETTest() throws ApiException {
        Long tenantId = null;
        api.getTenantLogoUsingGET(tenantId);

        // TODO: test validations
    }
    
    /**
     * Get a tenant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantUsingGETTest() throws ApiException {
        Long tenantId = null;
        TenantRepresentation response = api.getTenantUsingGET(tenantId);

        // TODO: test validations
    }
    
    /**
     * List tenants
     *
     * Only a tenant manager may access this endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantsUsingGETTest() throws ApiException {
        List<LightTenantRepresentation> response = api.getTenantsUsingGET();

        // TODO: test validations
    }
    
    /**
     * Update a tenant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUTTest() throws ApiException {
        Long tenantId = null;
        CreateTenantRepresentation createTenantRepresentation = null;
        TenantRepresentation response = api.updateUsingPUT(tenantId, createTenantRepresentation);

        // TODO: test validations
    }
    
    /**
     * Update a tenant&#39;s logo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadTenantLogoUsingPOSTTest() throws ApiException {
        Long tenantId = null;
        File file = null;
        ImageUploadRepresentation response = api.uploadTenantLogoUsingPOST(tenantId, file);

        // TODO: test validations
    }
    
}
